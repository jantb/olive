package main

var syntaxes = []map[string]interface{}{map[string]interface{}{"repository": map[string]interface{}{"compound-command": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"end": "\\]{1,2}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.logical-expression.shell"}}, "name": "meta.scope.logical-expression.shell", "patterns": []interface{}{map[string]interface{}{"include": "#logical-expression"}, map[string]interface{}{"include": "$self"}}, "begin": "\\[{1,2}", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.logical-expression.shell"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "\\){2}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.other.math.shell", "patterns": []interface{}{map[string]interface{}{"include": "#math"}}, "begin": "\\({2}"}, map[string]interface{}{"begin": "\\(", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.subshell.shell"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.subshell.shell"}}, "name": "meta.scope.subshell.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.group.shell"}}, "end": "(?<=^|;)\\s*(})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.group.shell"}}, "name": "meta.scope.group.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "(?<=\\s|^){(?=\\s|$)"}}}, "interpolation": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.other.math.shell", "patterns": []interface{}{map[string]interface{}{"include": "#math"}}, "begin": "\\$\\({2}", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "\\){2}"}, map[string]interface{}{"name": "string.interpolated.backtick.shell", "patterns": []interface{}{map[string]interface{}{"match": "\\\\[`\\\\$]", "name": "constant.character.escape.shell"}, map[string]interface{}{"begin": "(?<=\\W)(?=#)(?!#{)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.whitespace.comment.leading.shell"}}, "end": "(?!\\G)", "patterns": []interface{}{map[string]interface{}{"begin": "#", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.shell"}}, "end": "(?=`)", "name": "comment.line.number-sign.shell"}}}, map[string]interface{}{"include": "$self"}}, "begin": "`", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "`", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}}, map[string]interface{}{"end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.interpolated.dollar.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "\\$\\(", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}}}}, "list": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": ";|&&|&|\\|\\|", "name": "keyword.operator.list.shell"}}}, "math": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#variable"}, map[string]interface{}{"match": "\\+{1,2}|-{1,2}|!|~|\\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\\|{1,2}|&{1,2}|\\?|\\:|,|=|[*/%+\\-&^|]=|<<=|>>=", "name": "keyword.operator.arithmetic.shell"}, map[string]interface{}{"match": "0[xX]\\s+", "name": "constant.numeric.hex.shell"}, map[string]interface{}{"match": "0\\d+", "name": "constant.numeric.octal.shell"}, map[string]interface{}{"name": "constant.numeric.other.shell", "match": "\\d{1,2}#[0-9a-zA-Z@_]+"}, map[string]interface{}{"match": "\\d+", "name": "constant.numeric.integer.shell"}}}, "redirection": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "[><]\\(", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.interpolated.process-substitution.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}}, map[string]interface{}{"match": "&>|\\d*>&\\d*|\\d*(>>|>|<)|\\d*<&|\\d*<>", "name": "keyword.operator.redirect.shell"}}}, "case-clause": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"end": ";;", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.terminator.case-clause.shell"}}, "name": "meta.scope.case-clause.shell", "patterns": []interface{}{map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.case-pattern.shell"}}, "name": "meta.scope.case-pattern.shell", "patterns": []interface{}{map[string]interface{}{"match": "\\|", "name": "punctuation.separator.pipe-sign.shell"}, map[string]interface{}{"include": "#string"}, map[string]interface{}{"include": "#variable"}, map[string]interface{}{"include": "#interpolation"}, map[string]interface{}{"include": "#pathname"}}, "begin": "\\(|(?=\\S)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.case-pattern.shell"}}, "end": "\\)"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "(?<=\\))", "end": "(?=;;)", "name": "meta.scope.case-clause-body.shell"}}, "begin": "(?=\\S)"}}}, "function-definition": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "(?<=^|;|&|\\s)(function)\\s+([^\\s\\\\]+)(?:\\s*(\\(\\)))?", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.type.function.shell"}, "2": map[string]interface{}{"name": "entity.name.function.shell"}, "3": map[string]interface{}{"name": "punctuation.definition.arguments.shell"}}, "end": ";|&|$", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.function.shell"}}, "name": "meta.function.shell"}, map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.function.shell"}}, "name": "meta.function.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "(?<=^|;|&|\\s)([^\\s\\\\=]+)\\s*(\\(\\))", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.definition.arguments.shell"}, "1": map[string]interface{}{"name": "entity.name.function.shell"}}, "end": ";|&|$"}}}, "loop": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "name": "meta.scope.for-loop.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "(?<=^|;|&|\\s)(for)\\s+(?=\\({2})"}, map[string]interface{}{"begin": "(?<=^|;|&|\\s)(for)\\s+(.+?)\\s+(in)(?=\\s|;|&|$)", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "variable.other.loop.shell", "patterns": []interface{}{map[string]interface{}{"include": "#string"}}}, "3": map[string]interface{}{"name": "keyword.control.shell"}, "1": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "name": "meta.scope.for-in-loop.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}}, map[string]interface{}{"begin": "(?<=^|;|&|\\s)(while|until)(?=\\s|;|&|$)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "name": "meta.scope.while-loop.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}}, map[string]interface{}{"name": "meta.scope.select-block.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}, "begin": "(?<=^|;|&|\\s)(select)\\s+((?:[^\\s\\\\]|\\\\.)+)(?=\\s|;|&|$)", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "variable.other.loop.shell"}, "1": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)(done)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.shell"}}}, map[string]interface{}{"begin": "(?<=^|;|&|\\s)case(?=\\s|;|&|$)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)esac(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "name": "meta.scope.case-block.shell", "patterns": []interface{}{map[string]interface{}{"name": "meta.scope.case-body.shell", "patterns": []interface{}{map[string]interface{}{"include": "#comment"}, map[string]interface{}{"include": "#case-clause"}, map[string]interface{}{"include": "$self"}}, "begin": "(?<=^|;|&|\\s)in(?=\\s|;|&|$)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)(?=esac(\\s|;|&|$))"}, map[string]interface{}{"include": "$self"}}}, map[string]interface{}{"begin": "(?<=^|;|&|\\s)if(?=\\s|;|&|$)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "end": "(?<=^|;|&|\\s)fi(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.shell"}}, "name": "meta.scope.if-block.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}, "comment": map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.whitespace.comment.leading.shell"}}, "end": "(?!\\G)", "patterns": []interface{}{map[string]interface{}{"begin": "#!", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.shebang.shell"}}, "end": "$", "name": "comment.line.number-sign.shebang.shell"}, map[string]interface{}{"begin": "#", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.shell"}}, "end": "$", "name": "comment.line.number-sign.shell"}}, "begin": "(^\\s+)?(?<=^|\\W)(?=#)(?!#{)"}, "herestring": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.herestring.shell"}, "2": map[string]interface{}{"name": "string.quoted.single.shell"}, "3": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "(')", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "string.quoted.single.shell"}, "1": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "meta.herestring.shell", "contentName": "string.quoted.single.shell", "begin": "(<<<)\\s*(('))"}, map[string]interface{}{"end": "(\")", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "string.quoted.double.shell"}, "1": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "meta.herestring.shell", "contentName": "string.quoted.double.shell", "begin": "(<<<)\\s*((\"))", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.herestring.shell"}, "2": map[string]interface{}{"name": "string.quoted.double.shell"}, "3": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.herestring.shell"}, "2": map[string]interface{}{"name": "string.unquoted.herestring.shell"}}, "match": "(<<<)(([^\\s\\\\]|\\\\.)+)", "name": "meta.herestring.shell"}}}, "keyword": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<=^|;|&|\\s)(then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return)(?=\\s|;|&|$)", "name": "keyword.control.shell"}, map[string]interface{}{"match": "(?<=^|;|&|\\s)(?:export|declare|typeset|local|readonly)(?=\\s|;|&|$)", "name": "storage.modifier.shell"}}}, "pathname": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<=\\s|:|=|^)~", "name": "keyword.operator.tilde.shell"}, map[string]interface{}{"match": "\\*|\\?", "name": "keyword.operator.glob.shell"}, map[string]interface{}{"begin": "([?*+@!])(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.extglob.shell"}, "2": map[string]interface{}{"name": "punctuation.definition.extglob.shell"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.extglob.shell"}}, "name": "meta.structure.extglob.shell", "patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}, "variable": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.variable.shell"}}, "match": "(\\$)[a-zA-Z_][a-zA-Z0-9_]*", "name": "variable.other.normal.shell"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.variable.shell"}}, "match": "(\\$)[-*@#?$!0_]", "name": "variable.other.special.shell"}, map[string]interface{}{"match": "(\\$)[1-9]", "name": "variable.other.positional.shell", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.variable.shell"}}}, map[string]interface{}{"name": "variable.other.bracket.shell", "patterns": []interface{}{map[string]interface{}{"match": "!|:[-=?]?|\\*|@|#{1,2}|%{1,2}|/", "name": "keyword.operator.expansion.shell"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.section.array.shell"}, "3": map[string]interface{}{"name": "punctuation.section.array.shell"}}, "match": "(\\[)([^\\]]+)(\\])"}, map[string]interface{}{"include": "#variable"}, map[string]interface{}{"include": "#string"}}, "begin": "\\${", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.variable.shell"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.variable.shell"}}}}}, "heredoc": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"contentName": "source.ruby.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.ruby"}}, "begin": "(<<)-(\"|'|)(RUBY)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^\\t*(RUBY)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.ruby.shell"}, map[string]interface{}{"end": "^(RUBY)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.ruby.shell", "contentName": "source.ruby.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.ruby"}}, "begin": "(<<)(\"|'|)(RUBY)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}}, map[string]interface{}{"begin": "(<<)-(\"|'|)(PYTHON)\\2", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}, "1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}}, "end": "^\\t*(PYTHON)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.python.shell", "contentName": "source.python.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.python"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^(PYTHON)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.python.shell", "contentName": "source.python.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.python"}}, "begin": "(<<)(\"|'|)(PYTHON)\\2"}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.applescript.shell", "contentName": "source.applescript.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.applescript"}}, "begin": "(<<)-(\"|'|)(APPLESCRIPT)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^\\t*(APPLESCRIPT)(?=\\s|;|&|$)"}, map[string]interface{}{"end": "^(APPLESCRIPT)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.applescript.shell", "contentName": "source.applescript.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.applescript"}}, "begin": "(<<)(\"|'|)(APPLESCRIPT)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.html.shell", "contentName": "text.html.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "text.html.basic"}}, "begin": "(<<)-(\"|'|)(HTML)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^\\t*(HTML)(?=\\s|;|&|$)"}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.html.shell", "contentName": "text.html.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "text.html.basic"}}, "begin": "(<<)(\"|'|)(HTML)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^(HTML)(?=\\s|;|&|$)"}, map[string]interface{}{"end": "^\\t*(MARKDOWN)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.markdown.shell", "contentName": "text.html.markdown.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "text.html.markdown"}}, "begin": "(<<)-(\"|'|)(MARKDOWN)\\2", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}, "1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}}}, map[string]interface{}{"contentName": "text.html.markdown.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "text.html.markdown"}}, "begin": "(<<)(\"|'|)(MARKDOWN)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^(MARKDOWN)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.markdown.shell"}, map[string]interface{}{"begin": "(<<)-(\"|'|)(TEXTILE)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^\\t*(TEXTILE)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.textile.shell", "contentName": "text.html.textile.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "text.html.textile"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^(TEXTILE)(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.textile.shell", "contentName": "text.html.textile.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "text.html.textile"}}, "begin": "(<<)(\"|'|)(TEXTILE)\\2"}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "contentName": "source.shell.embedded.shell", "name": "string.unquoted.heredoc.no-indent.shell.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.shell"}}, "begin": "(<<)-(\"|'|)(SHELL)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^\\t*(?=\\s|;|&|$)"}, map[string]interface{}{"begin": "(<<)(\"|'|)(SHELL)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.shell.shell", "contentName": "source.shell.embedded.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.shell"}}}, map[string]interface{}{"begin": "(<<)-(\"|'|)\\\\?(\\w+)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^\\t*(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.no-indent.shell"}, map[string]interface{}{"begin": "(<<)(\"|'|)\\\\?(\\w+)\\2", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.operator.heredoc.shell"}, "3": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "end": "^(?=\\s|;|&|$)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.heredoc-token.shell"}}, "name": "string.unquoted.heredoc.shell"}}}, "pipeline": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<=^|;|&|\\s)(time)(?=\\s|;|&|$)", "name": "keyword.other.shell"}, map[string]interface{}{"match": "[|!]", "name": "keyword.operator.pipe.shell"}}}, "string": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\\\.", "name": "constant.character.escape.shell"}, map[string]interface{}{"begin": "'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.quoted.single.shell"}, map[string]interface{}{"begin": "\\$?\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.quoted.double.shell", "patterns": []interface{}{map[string]interface{}{"match": "\\\\[\\$`\"\\\\\\n]", "name": "constant.character.escape.shell"}, map[string]interface{}{"include": "#variable"}, map[string]interface{}{"include": "#interpolation"}}}, map[string]interface{}{"begin": "\\$'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.shell"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.shell"}}, "name": "string.quoted.single.dollar.shell", "patterns": []interface{}{map[string]interface{}{"match": "\\\\(a|b|e|f|n|r|t|v|\\\\|')", "name": "constant.character.escape.ansi-c.shell"}, map[string]interface{}{"match": "\\\\[0-9]{3}", "name": "constant.character.escape.octal.shell"}, map[string]interface{}{"match": "\\\\x[0-9a-fA-F]{2}", "name": "constant.character.escape.hex.shell"}, map[string]interface{}{"match": "\\\\c.", "name": "constant.character.escape.control-char.shell"}}}}}, "support": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<=^|;|&|\\s)(?::|\\.)(?=\\s|;|&|$)", "name": "support.function.builtin.shell"}, map[string]interface{}{"match": "(?<=^|;|&|\\s)(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)(?=\\s|;|&|$)", "name": "support.function.builtin.shell"}}}, "logical-expression": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"comment": "do we want a special rule for ( expr )?", "match": "=[=~]?|!=?|<|>|&&|\\|\\|", "name": "keyword.operator.logical.shell"}, map[string]interface{}{"match": "(?<!\\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])", "name": "keyword.operator.logical.shell"}}}}, "scopeName": "source.shell", "name": "Shell Script", "fileTypes": []interface{}{"sh", "bash", "ksh", "zsh", "zsh-theme", "zshenv", "zlogin", "zlogout", "zprofile", "zshrc", "bashrc", "bash_aliases", "bash_profile", "bash_login", "profile", "bash_logout", ".textmate_init", "npmrc", "PKGBUILD", "install", "cygport", "bats", "ebuild"}, "firstLineMatch": "(?x)\n# Hashbang\n^\\#!.*(?:\\s|\\/)\n  (?:bash|zsh|sh|tcsh|ksh|dash|ash|csh|rc)\n(?:$|\\s)\n|\n# Modeline\n(?i:\n  # Emacs\n  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)\n    (?:shell-script|sh)\n  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-\n  |\n  # Vim\n  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=\n    sh\n  (?=\\s|:|$)\n)", "patterns": []interface{}{map[string]interface{}{"include": "#comment"}, map[string]interface{}{"include": "#pipeline"}, map[string]interface{}{"include": "#list"}, map[string]interface{}{"include": "#compound-command"}, map[string]interface{}{"include": "#loop"}, map[string]interface{}{"include": "#function-definition"}, map[string]interface{}{"include": "#string"}, map[string]interface{}{"include": "#variable"}, map[string]interface{}{"include": "#interpolation"}, map[string]interface{}{"include": "#heredoc"}, map[string]interface{}{"include": "#herestring"}, map[string]interface{}{"include": "#redirection"}, map[string]interface{}{"include": "#pathname"}, map[string]interface{}{"include": "#keyword"}, map[string]interface{}{"include": "#support"}}}, map[string]interface{}{"foldingStartMarker": "^\\+\\+\\+", "foldingStopMarker": "^---", "patterns": []interface{}{map[string]interface{}{"begin": "\\A(?!#)", "end": "^(?<!\\A)(?=# Please enter the commit message)", "name": "meta.scope.message.git-commit", "patterns": []interface{}{map[string]interface{}{"match": "\\G((fixup|squash)!)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.$2.git-commit"}}}, map[string]interface{}{"name": "comment.line.number-sign.git-commit", "match": "^#.*$"}, map[string]interface{}{"match": "\\A(?!#)(([a-z])|.).{0,48}((\\.)|.)$", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "invalid.illegal.first-char-should-be-uppercase.git-commit"}, "4": map[string]interface{}{"name": "invalid.illegal.subject-no-trailing-period.git-commit"}}}, map[string]interface{}{"captures": map[string]interface{}{"2": map[string]interface{}{"name": "invalid.illegal.first-char-should-be-uppercase.git-commit"}, "3": map[string]interface{}{"name": "invalid.deprecated.line-too-long.git-commit"}, "5": map[string]interface{}{"name": "invalid.illegal.subject-no-trailing-period.git-commit"}, "6": map[string]interface{}{"name": "invalid.deprecated.line-too-long.git-commit"}}, "match": "\\A(?!#)(([a-z])|.).{49}(.{0,18})((\\.)|(.))$"}, map[string]interface{}{"match": "\\A(?!#)(([a-z])|.).{49}(.{0,19})(.*?)(\\.?)$", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "invalid.illegal.first-char-should-be-uppercase.git-commit"}, "3": map[string]interface{}{"name": "invalid.deprecated.line-too-long.git-commit"}, "4": map[string]interface{}{"name": "invalid.illegal.line-too-long.git-commit"}, "5": map[string]interface{}{"name": "invalid.illegal.subject-no-trailing-period.git-commit"}}}, map[string]interface{}{"match": "^(?!#).{72}(.+)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.line-too-long.git-commit"}}}}}, map[string]interface{}{"begin": "(?<=^)(?=# Please enter the commit message)", "end": "\\z", "name": "meta.scope.metadata.git-commit", "patterns": []interface{}{map[string]interface{}{"include": "#metadata"}}}}, "repository": map[string]interface{}{"metadata": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "(?=^# Changes to be committed:)", "end": "(?!\\G)((?=^# \\w)|(?!^#))", "patterns": []interface{}{map[string]interface{}{"begin": "(^[ \\t]+)?(?=#)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.whitespace.comment.leading.git-commit"}}, "contentName": "comment.line.number-sign.git-commit", "end": "(?!\\G)^", "patterns": []interface{}{map[string]interface{}{"match": "\\G#", "name": "punctuation.definition.comment.git-commit"}, map[string]interface{}{"match": "((modified|renamed):.*)$\\n?", "name": "markup.changed.git-commit"}, map[string]interface{}{"match": "(new file:.*)$\\n?", "name": "markup.inserted.git-commit"}, map[string]interface{}{"match": "(deleted:.*)$\\n?", "name": "markup.deleted.git-commit"}}}}}, map[string]interface{}{"begin": "^(?=#)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.whitespace.comment.leading.git-commit"}}, "contentName": "comment.line.number-sign.git-commit", "end": "(?!\\G)^", "patterns": []interface{}{map[string]interface{}{"match": "\\G#", "name": "punctuation.definition.comment.git-commit"}}}, map[string]interface{}{"begin": "(?=diff\\ \\-\\-git)", "comment": "diff presented at the end of the commit message when using commit -v.", "contentName": "source.diff", "end": "\\z", "name": "meta.embedded.diff.git-commit", "patterns": []interface{}{map[string]interface{}{"include": "source.diff"}}}}}}, "name": "Git Commit Message", "scopeName": "text.git-commit", "fileTypes": []interface{}{"COMMIT_EDITMSG", "MERGE_MSG"}}, map[string]interface{}{"name": "Git Config", "scopeName": "source.git-config", "fileTypes": []interface{}{".git/config", "gitconfig", "gitmodules"}, "patterns": []interface{}{map[string]interface{}{"include": "#section"}, map[string]interface{}{"include": "#comment"}}, "repository": map[string]interface{}{"boolean": map[string]interface{}{"match": "\\b(?i:yes|no|0|1|true|false)\\b", "name": "constant.language.boolean.git-config"}, "comment": map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "comment.line.number-sign.git-config"}, "2": map[string]interface{}{"name": "punctuation.definition.comment.git-config"}, "3": map[string]interface{}{"name": "comment.line.semi-colon.git-config"}, "4": map[string]interface{}{"name": "punctuation.definition.comment.git-config"}}, "match": "((#).*$\\n?)|((;).*$\\n?)"}, "section": map[string]interface{}{"end": "(?=\\[)", "name": "meta.section.git-config", "patterns": []interface{}{map[string]interface{}{"include": "#value_pair"}, map[string]interface{}{"include": "#comment"}}, "begin": "\\[\\s*([\\w_-]+)(?:\\s+((\")(?:[^\"\\\\]|\\\\[\"\\\\])*(\"))|\\.([\\w_-]+))?\\s*\\]", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.section.git-config"}, "2": map[string]interface{}{"name": "entity.name.section.subsection.git-config"}, "3": map[string]interface{}{"name": "punctuation.definition.section.subsection.begin.git-config"}, "4": map[string]interface{}{"name": "punctuation.definition.section.subsection.end.git-config"}, "5": map[string]interface{}{"name": "entity.name.section.subsection.git-config"}}}, "string": map[string]interface{}{"begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.git-config"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.git-config"}}, "name": "string.quoted.double.git-config", "patterns": []interface{}{map[string]interface{}{"match": "\\\\[ntb\"\\\\]", "name": "constant.character.escape.git-config"}, map[string]interface{}{"match": "\\\\.", "name": "invalid.illegal.unknown-escape.git-config"}}}, "escaped-string": map[string]interface{}{"match": "\\\\\"", "name": "constant.character.escape.git-config"}, "value_pair": map[string]interface{}{"name": "meta.value-pair.section-item.git-config", "patterns": []interface{}{map[string]interface{}{"include": "#boolean"}, map[string]interface{}{"include": "#escaped-string"}, map[string]interface{}{"include": "#string"}, map[string]interface{}{"include": "#comment"}}, "begin": "([-\\w]+)\\s*(=)\\s*(?!$)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "support.constant.git-config"}, "2": map[string]interface{}{"name": "punctuation.separator.key-value.git-config"}}, "end": "$|(?=[#;])"}}}, map[string]interface{}{"name": "Git Rebase Message", "scopeName": "text.git-rebase", "fileTypes": []interface{}{"git-rebase-todo"}, "patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.comment.git-rebase"}}, "match": "^\\s*(#).*$\\n?", "name": "comment.line.number-sign.git-rebase"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "support.function.git-rebase"}, "2": map[string]interface{}{"name": "constant.sha.git-rebase"}, "3": map[string]interface{}{"name": "meta.commit-message.git-rebase"}}, "match": "^\\s*(pick|p|reword|r|edit|e|squash|s|fixup|f|drop|d)\\s+([0-9a-f]+)\\s+(.*)$", "name": "meta.commit-command.git-rebase"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "support.function.git-rebase"}}, "end": "$", "name": "meta.exec-command.git-rebase", "patterns": []interface{}{map[string]interface{}{"include": "source.shell"}}, "begin": "^\\s*(exec|x)\\s+"}}}, map[string]interface{}{"name": "Go", "comment": "Go language", "fileTypes": []interface{}{"go"}, "foldingStartMarker": "({|\\()\\s*$", "foldingStopMarker": "(}|\\))\\s*$", "patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"name": "string.quoted.double.go", "patterns": []interface{}{map[string]interface{}{"include": "#string_escaped_char"}, map[string]interface{}{"include": "#string_placeholder"}}, "comment": "Interpreted string literals", "begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.go"}}}, map[string]interface{}{"begin": "`", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}}, "end": "`", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.go"}}, "name": "string.quoted.raw.go", "patterns": []interface{}{map[string]interface{}{"include": "#string_placeholder"}}, "comment": "Raw string literals"}, map[string]interface{}{"match": "<\\-([\\t ]+)chan\\b", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.receive-channel.go"}}, "comment": "Syntax error receiving channels"}, map[string]interface{}{"comment": "Syntax error sending channels", "match": "\\bchan([\\t ]+)<-", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.send-channel.go"}}}, map[string]interface{}{"comment": "Syntax error using slices", "match": "\\[\\](\\s+)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.slice.go"}}}, map[string]interface{}{"comment": "Syntax error numeric literals", "match": "\\b0[0-7]*[89]\\d*\\b", "name": "invalid.illegal.numeric.go"}, map[string]interface{}{"comment": "Built-in functions", "match": "\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()", "name": "support.function.builtin.go"}, map[string]interface{}{"comment": "Function declarations", "match": "^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?([a-zA-Z_]\\w*)(?=\\())?", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.function.go"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#brackets"}, map[string]interface{}{"include": "#operators"}}}, "3": map[string]interface{}{"name": "entity.name.function.go"}}}, map[string]interface{}{"comment": "Functions", "match": "(\\bfunc\\b)|([a-zA-Z_]\\w*)(?=\\()", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.function.go"}, "2": map[string]interface{}{"name": "support.function.go"}}}, map[string]interface{}{"match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?", "name": "constant.numeric.floating-point.go", "comment": "Floating-point literals"}, map[string]interface{}{"comment": "Integers", "match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b", "name": "constant.numeric.integer.go"}, map[string]interface{}{"name": "constant.language.go", "comment": "Language constants", "match": "\\b(true|false|nil|iota)\\b"}, map[string]interface{}{"comment": "Package declarations", "match": "(?<=package)\\s+([a-zA-Z_]\\w*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.package.go"}}}, map[string]interface{}{"comment": "Single line import declarations", "match": "(?<=import)(\\s+((?!\\s+\")[^\\s]*)?\\s*)((\")([^\"]*)(\"))", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "entity.alias.import.go"}, "3": map[string]interface{}{"name": "string.quoted.double.go"}, "4": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}, "5": map[string]interface{}{"name": "entity.name.import.go"}, "6": map[string]interface{}{"name": "punctuation.definition.string.end.go"}}}, map[string]interface{}{"begin": "(?<=import)\\s+(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "patterns": []interface{}{map[string]interface{}{"match": "((?!\\s+\")[^\\s]*)?\\s+((\")([^\"]*)(\"))", "captures": map[string]interface{}{"4": map[string]interface{}{"name": "entity.name.import.go"}, "5": map[string]interface{}{"name": "punctuation.definition.string.end.go"}, "1": map[string]interface{}{"name": "entity.alias.import.go"}, "2": map[string]interface{}{"name": "string.quoted.double.go"}, "3": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}}}, map[string]interface{}{"include": "#comments"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "comment": "Multiline import declarations"}, map[string]interface{}{"comment": "Type declarations", "match": "(?<=type)\\s+([a-zA-Z_]\\w*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.type.go"}}}, map[string]interface{}{"captures": map[string]interface{}{"0": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "variable.other.assignment.go", "match": "[a-zA-Z_]\\w*"}, map[string]interface{}{"include": "#delimiters"}}}}, "comment": "Shorthand variable declaration and assignments", "match": "[a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*(?=\\s*:=)"}, map[string]interface{}{"comment": "Assignments to existing variables", "match": "(?<!var )\\s*([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(?=\\s*=[^=])", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}}}, map[string]interface{}{"comment": "Single line variable declarations/assignments", "match": "(?<=var)\\s+(.*)$", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#variables"}}}}}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#variables"}, map[string]interface{}{"include": "$self"}}, "comment": "Multiline variable declarations/assignments", "begin": "(\\bvar\\b)\\s+(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.var.go"}, "2": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}}, map[string]interface{}{"comment": "Terminators", "match": ";", "name": "punctuation.terminator.go"}, map[string]interface{}{"include": "#brackets"}, map[string]interface{}{"include": "#delimiters"}, map[string]interface{}{"include": "#keywords"}, map[string]interface{}{"include": "#operators"}, map[string]interface{}{"include": "#runes"}, map[string]interface{}{"include": "#storage_types"}}, "repository": map[string]interface{}{"brackets": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\{|\\}", "name": "punctuation.other.bracket.curly.go"}, map[string]interface{}{"match": "\\(|\\)", "name": "punctuation.other.bracket.round.go"}, map[string]interface{}{"match": "\\[|\\]", "name": "punctuation.other.bracket.square.go"}}}, "delimiters": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": ",", "name": "punctuation.other.comma.go"}, map[string]interface{}{"match": "\\.(?!\\.\\.)", "name": "punctuation.other.period.go"}, map[string]interface{}{"match": ":(?!=)", "name": "punctuation.other.colon.go"}}}, "keywords": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "keyword.control.go", "comment": "Flow control keywords", "match": "\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\b"}, map[string]interface{}{"match": "\\bchan\\b", "name": "keyword.channel.go"}, map[string]interface{}{"match": "\\bconst\\b", "name": "keyword.const.go"}, map[string]interface{}{"match": "\\bfunc\\b", "name": "keyword.function.go"}, map[string]interface{}{"name": "keyword.interface.go", "match": "\\binterface\\b"}, map[string]interface{}{"match": "\\bimport\\b", "name": "keyword.import.go"}, map[string]interface{}{"match": "\\bmap\\b", "name": "keyword.map.go"}, map[string]interface{}{"match": "\\bpackage\\b", "name": "keyword.package.go"}, map[string]interface{}{"name": "keyword.struct.go", "match": "\\bstruct\\b"}, map[string]interface{}{"match": "\\btype\\b", "name": "keyword.type.go"}, map[string]interface{}{"match": "\\bvar\\b", "name": "keyword.var.go"}}}, "storage_types": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "storage.type.boolean.go", "match": "\\bbool\\b"}, map[string]interface{}{"match": "\\bbyte\\b", "name": "storage.type.byte.go"}, map[string]interface{}{"match": "\\berror\\b", "name": "storage.type.error.go"}, map[string]interface{}{"match": "\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\b", "name": "storage.type.numeric.go"}, map[string]interface{}{"match": "\\brune\\b", "name": "storage.type.rune.go"}, map[string]interface{}{"match": "\\bstring\\b", "name": "storage.type.string.go"}, map[string]interface{}{"match": "\\buintptr\\b", "name": "storage.type.uintptr.go"}}}, "variables": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)\\s*(=.*)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}, map[string]interface{}{"match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\*]?[a-zA-Z_]\\w*\\s*)(=.*)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}, map[string]interface{}{"match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\[\\]\\*]{0,3}[a-zA-Z_]\\w*\\s*[^=].*)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.declaration.go"}, map[string]interface{}{"include": "#delimiters"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}}, "comment": "First add tests and make sure existing tests still pass when changing anything here!"}, "comments": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"end": "\\*/", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.go"}}, "name": "comment.block.go", "begin": "/\\*"}, map[string]interface{}{"end": "$", "name": "comment.line.double-slash.go", "begin": "//", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.go"}}}}}, "operators": map[string]interface{}{"comment": "Note that the order here is very important!", "patterns": []interface{}{map[string]interface{}{"match": "(\\*|&)(?=\\w)", "name": "keyword.operator.address.go"}, map[string]interface{}{"match": "<\\-", "name": "keyword.operator.channel.go"}, map[string]interface{}{"match": "\\-\\-", "name": "keyword.operator.decrement.go"}, map[string]interface{}{"match": "\\+\\+", "name": "keyword.operator.increment.go"}, map[string]interface{}{"match": "(==|!=|<=|>=|<[^<]|>[^>])", "name": "keyword.operator.comparison.go"}, map[string]interface{}{"match": "(&&|\\|\\||!)", "name": "keyword.operator.logical.go"}, map[string]interface{}{"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)", "name": "keyword.operator.assignment.go"}, map[string]interface{}{"match": "(\\+|\\-|\\*|/|%)", "name": "keyword.operator.arithmetic.go"}, map[string]interface{}{"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)", "name": "keyword.operator.arithmetic.bitwise.go"}, map[string]interface{}{"match": "\\.\\.\\.", "name": "keyword.operator.ellipsis.go"}}}, "runes": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\'(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}))\\'", "name": "constant.other.rune.go"}, map[string]interface{}{"match": "\\'.*\\'", "name": "invalid.illegal.unknown-rune.go"}}}, "string_escaped_char": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})", "name": "constant.character.escape.go"}, map[string]interface{}{"name": "invalid.illegal.unknown-escape.go", "match": "\\\\[^0-7xuUabfnrtv\\'\"]"}}}, "string_placeholder": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]", "name": "constant.other.placeholder.go"}}}}, "scopeName": "source.go"}, map[string]interface{}{"scopeName": "source.java", "name": "Java", "fileTypes": []interface{}{"java", "bsh"}, "patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"match": "(?<=\\.)\\s*\\.|\\.(?=\\s*;)", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"match": "(?<!_)_(?=\\s*(\\.|;))|[A-Z]+|\\b\\d+|-+", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"match": "(?x)\\b(?<!\\$)\n(abstract|assert|boolean|break|byte|case|catch|char|class|\nconst|continue|default|do|double|else|enum|extends|final|\nfinally|float|for|goto|if|implements|import|instanceof|int|\ninterface|long|native|new|package|private|protected|public|\nreturn|short|static|strictfp|super|switch|syncronized|this|\nthrow|throws|transient|try|void|volatile|while|\ntrue|false|null)\\b", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"match": "\\.", "name": "punctuation.separator.java"}}, "begin": "\\b(package)\\b\\s*", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.package.java"}}, "end": "\\s*(;)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.terminator.java"}}, "name": "meta.package.java", "contentName": "storage.modifier.package.java"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.import.java"}, "2": map[string]interface{}{"name": "storage.modifier.java"}}, "end": "\\s*(;)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.terminator.java"}}, "name": "meta.import.java", "contentName": "storage.modifier.import.java", "patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"match": "(?<=\\.)\\s*\\.|\\.(?=\\s*;)", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"match": "(?<!\\.)\\s*\\*", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"match": "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"match": "(?x)\\b(?<!\\$)\n(abstract|assert|boolean|break|byte|case|catch|char|class|\nconst|continue|default|do|double|else|enum|extends|final|\nfinally|float|for|goto|if|implements|import|instanceof|int|\ninterface|long|native|new|package|private|protected|public|\nreturn|short|static|strictfp|super|switch|syncronized|this|\nthrow|throws|transient|try|void|volatile|while|\ntrue|false|null)\\b", "name": "invalid.illegal.character_not_allowed_here.java"}, map[string]interface{}{"name": "punctuation.separator.java", "match": "\\."}, map[string]interface{}{"match": "\\*", "name": "variable.language.wildcard.java"}}, "begin": "\\b(import)\\b\\s*\\b(static)?\\b\\s"}, map[string]interface{}{"include": "#comments-javadoc"}, map[string]interface{}{"include": "#code"}}, "repository": map[string]interface{}{"comments-inline": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "/\\*", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.java"}}, "end": "\\*/", "name": "comment.block.java"}, map[string]interface{}{"begin": "(^[ \\t]+)?(?=//)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.whitespace.comment.leading.java"}}, "end": "(?!\\G)", "patterns": []interface{}{map[string]interface{}{"begin": "//", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.java"}}, "end": "\\n", "name": "comment.line.double-slash.java"}}}}}, "function-call": map[string]interface{}{"name": "meta.function-call.java", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}, "begin": "([A-Za-z_$][\\w$]*)\\s*(\\()", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.definition.parameters.begin.bracket.round.java"}, "1": map[string]interface{}{"name": "entity.name.function.java"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.parameters.end.bracket.round.java"}}}, "objects": map[string]interface{}{"match": "(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)", "name": "variable.other.object.java"}, "primitive-types": map[string]interface{}{"match": "\\b(void|boolean|byte|char|short|int|float|long|double)\\b", "name": "storage.type.primitive.java"}, "strings": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.java"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.java"}}, "name": "string.quoted.double.java", "patterns": []interface{}{map[string]interface{}{"match": "\\\\.", "name": "constant.character.escape.java"}}}, map[string]interface{}{"begin": "'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.java"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.java"}}, "name": "string.quoted.single.java", "patterns": []interface{}{map[string]interface{}{"match": "\\\\.", "name": "constant.character.escape.java"}}}}}, "comments": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "/\\*\\*/", "name": "comment.block.empty.java", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.java"}}}, map[string]interface{}{"include": "text.html.javadoc"}, map[string]interface{}{"include": "#comments-inline"}}}, "keywords": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\bthrow\\b", "name": "keyword.control.throw.java"}, map[string]interface{}{"name": "keyword.control.ternary.java", "match": "\\?|:"}, map[string]interface{}{"match": "\\b(return|break|case|continue|default|do|while|for|switch|if|else)\\b", "name": "keyword.control.java"}, map[string]interface{}{"match": "\\b(instanceof)\\b", "name": "keyword.operator.instanceof.java"}, map[string]interface{}{"name": "keyword.operator.bitwise.java", "match": "(<<|>>>?|~|\\^)"}, map[string]interface{}{"match": "((&|\\^|\\||<<|>>>?)=)", "name": "keyword.operator.assignment.bitwise.java"}, map[string]interface{}{"match": "(===?|!=|<=|>=|<>|<|>)", "name": "keyword.operator.comparison.java"}, map[string]interface{}{"match": "([+*/%-]=)", "name": "keyword.operator.assignment.arithmetic.java"}, map[string]interface{}{"match": "(=)", "name": "keyword.operator.assignment.java"}, map[string]interface{}{"match": "(\\-\\-|\\+\\+)", "name": "keyword.operator.increment-decrement.java"}, map[string]interface{}{"match": "(\\-|\\+|\\*|\\/|%)", "name": "keyword.operator.arithmetic.java"}, map[string]interface{}{"match": "(!|&&|\\|\\|)", "name": "keyword.operator.logical.java"}, map[string]interface{}{"match": "(\\||&)", "name": "keyword.operator.bitwise.java"}}}, "throws": map[string]interface{}{"begin": "throws", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "storage.modifier.java"}}, "end": "(?={|;)", "name": "meta.throwables.java", "patterns": []interface{}{map[string]interface{}{"include": "#object-types"}}}, "assertions": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": ":", "name": "keyword.operator.assert.expression-separator.java"}, map[string]interface{}{"include": "#code"}}, "begin": "\\b(assert)\\s", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.assert.java"}}, "end": "$", "name": "meta.declaration.assertion.java"}}}, "anonymous-block-and-instance-initializer": map[string]interface{}{"begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.block.begin.bracket.curly.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.block.end.bracket.curly.java"}}, "patterns": []interface{}{map[string]interface{}{"include": "#code"}}}, "object-types-inherited": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#generics"}, map[string]interface{}{"match": "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b", "name": "entity.other.inherited-class.java", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}}}, map[string]interface{}{"name": "punctuation.separator.delimiter.java", "match": ","}}}, "parameters": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\bfinal\\b", "name": "storage.modifier.java"}, map[string]interface{}{"include": "#annotations"}, map[string]interface{}{"include": "#all-types"}, map[string]interface{}{"match": "\\w+", "name": "variable.parameter.java"}, map[string]interface{}{"match": ",", "name": "punctuation.separator.delimiter.java"}}}, "parens": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "\\(", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.round.java"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.round.java"}}, "patterns": []interface{}{map[string]interface{}{"include": "#code"}}}, map[string]interface{}{"begin": "\\[", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.square.java"}}, "end": "\\]", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.square.java"}}, "patterns": []interface{}{map[string]interface{}{"include": "#code"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.curly.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.curly.java"}}, "patterns": []interface{}{map[string]interface{}{"include": "#code"}}, "begin": "{"}}}, "all-types": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#primitive-arrays"}, map[string]interface{}{"include": "#primitive-types"}, map[string]interface{}{"include": "#object-types"}}}, "class-body": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comments-javadoc"}, map[string]interface{}{"include": "#comments"}, map[string]interface{}{"include": "#class"}, map[string]interface{}{"include": "#enums"}, map[string]interface{}{"include": "#generics"}, map[string]interface{}{"include": "#static-initializer"}, map[string]interface{}{"include": "#methods"}, map[string]interface{}{"include": "#annotations"}, map[string]interface{}{"include": "#member-variables"}, map[string]interface{}{"include": "#storage-modifiers"}, map[string]interface{}{"include": "#code"}}}, "code": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#annotations"}, map[string]interface{}{"include": "#comments"}, map[string]interface{}{"include": "#enums"}, map[string]interface{}{"include": "#class"}, map[string]interface{}{"include": "#anonymous-block-and-instance-initializer"}, map[string]interface{}{"include": "#try-catch-finally"}, map[string]interface{}{"include": "#assertions"}, map[string]interface{}{"include": "#parens"}, map[string]interface{}{"include": "#constants-and-special-vars"}, map[string]interface{}{"include": "#numbers"}, map[string]interface{}{"include": "#anonymous-classes-and-new"}, map[string]interface{}{"include": "#lambda-expression"}, map[string]interface{}{"include": "#keywords"}, map[string]interface{}{"include": "#storage-modifiers"}, map[string]interface{}{"include": "#method-call"}, map[string]interface{}{"include": "#function-call"}, map[string]interface{}{"include": "#objects"}, map[string]interface{}{"include": "#properties"}, map[string]interface{}{"include": "#variables"}, map[string]interface{}{"include": "#strings"}, map[string]interface{}{"include": "#all-types"}, map[string]interface{}{"match": ",", "name": "punctuation.separator.delimiter.java"}, map[string]interface{}{"match": "\\.", "name": "punctuation.separator.period.java"}, map[string]interface{}{"match": ";", "name": "punctuation.terminator.java"}}}, "numbers": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)", "name": "constant.numeric.hex.java"}, map[string]interface{}{"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)", "name": "constant.numeric.binary.java"}, map[string]interface{}{"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)", "name": "constant.numeric.octal.java"}, map[string]interface{}{"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)", "name": "constant.numeric.decimal.java"}}}, "member-variables": map[string]interface{}{"begin": "(?=private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)", "end": "(?=;)", "patterns": []interface{}{map[string]interface{}{"include": "#storage-modifiers"}, map[string]interface{}{"include": "#variables"}}}, "object-types": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#generics"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"include": "#parens"}}, "begin": "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*([A-Z]\\w*)\\s*(?=\\[)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}, "2": map[string]interface{}{"name": "storage.type.object.array.java"}}, "end": "(?!\\s*\\[)"}, map[string]interface{}{"begin": "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\s*(?=<)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "storage.type.java"}, "1": map[string]interface{}{"name": "punctuation.separator.period.java"}}, "end": "(?<=>)", "patterns": []interface{}{map[string]interface{}{"include": "#generics"}}}, map[string]interface{}{"match": "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b", "name": "storage.type.java", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}}}}}, "lambda-expression": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "->", "name": "storage.type.function.arrow.java"}}}, "method-call": map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.parameters.end.bracket.round.java"}}, "name": "meta.method-call.java", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}, "begin": "(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}, "2": map[string]interface{}{"name": "entity.name.function.java"}, "3": map[string]interface{}{"name": "punctuation.definition.parameters.begin.bracket.round.java"}}, "end": "\\)"}, "storage-modifiers": map[string]interface{}{"match": "\\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|volatile)\\b", "name": "storage.modifier.java"}, "anonymous-classes-and-new": map[string]interface{}{"begin": "\\bnew\\b", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.new.java"}}, "end": "(?=;|\\)|,)", "patterns": []interface{}{map[string]interface{}{"include": "#function-call"}, map[string]interface{}{"include": "#all-types"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.section.inner-class.begin.bracket.curly.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.inner-class.end.bracket.curly.java"}}, "name": "meta.inner-class.java", "patterns": []interface{}{map[string]interface{}{"include": "#class-body"}}, "begin": "(?<!\\])\\s*({)"}, map[string]interface{}{"include": "#parens"}}}, "class": map[string]interface{}{"begin": "(?=\\w?[\\w\\s]*(?:class|(?:@)?interface|enum)\\s+\\w+)", "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.class.end.bracket.curly.java"}}, "name": "meta.class.java", "patterns": []interface{}{map[string]interface{}{"include": "#storage-modifiers"}, map[string]interface{}{"include": "#generics"}, map[string]interface{}{"include": "#comments"}, map[string]interface{}{"name": "meta.class.identifier.java", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.modifier.java"}, "2": map[string]interface{}{"name": "entity.name.type.class.java"}}, "match": "(class|(?:@)?interface|enum)\\s+(\\w+)"}, map[string]interface{}{"begin": "extends", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "storage.modifier.extends.java"}}, "end": "(?={|implements)", "name": "meta.definition.class.inherited.classes.java", "patterns": []interface{}{map[string]interface{}{"include": "#object-types-inherited"}, map[string]interface{}{"include": "#comments"}}}, map[string]interface{}{"begin": "(implements)\\s", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.modifier.implements.java"}}, "end": "(?=\\s*extends|\\{)", "name": "meta.definition.class.implemented.interfaces.java", "patterns": []interface{}{map[string]interface{}{"include": "#object-types-inherited"}, map[string]interface{}{"include": "#comments"}}}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#class-body"}}, "begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.class.begin.bracket.curly.java"}}, "end": "(?=})", "contentName": "meta.class.body.java"}}}, "comments-javadoc": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "^\\s*/\\*\\*", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.java"}}, "end": "\\*/", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.java"}}, "name": "comment.block.javadoc.java", "patterns": []interface{}{map[string]interface{}{"match": "@(author|deprecated|return|see|serial|since|version)\\b", "name": "keyword.other.documentation.javadoc.java"}, map[string]interface{}{"match": "(@param)\\s+(\\S+)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.documentation.javadoc.java"}, "2": map[string]interface{}{"name": "variable.parameter.java"}}}, map[string]interface{}{"match": "(@(?:exception|throws))\\s+(\\S+)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.documentation.javadoc.java"}, "2": map[string]interface{}{"name": "entity.name.type.class.java"}}}, map[string]interface{}{"match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "entity.name.type.class.java"}, "3": map[string]interface{}{"name": "variable.parameter.java"}, "1": map[string]interface{}{"name": "keyword.other.documentation.javadoc.java"}}}}}}}, "generics": map[string]interface{}{"begin": "<", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.angle.java"}}, "end": ">", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.bracket.angle.java"}}, "patterns": []interface{}{map[string]interface{}{"match": "\\b(extends|super)\\b", "name": "storage.modifier.$1.java"}, map[string]interface{}{"match": "([a-zA-Z$_][a-zA-Z0-9$_]*)(?=\\s*<)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.type.java"}}}, map[string]interface{}{"match": "[a-zA-Z$_][a-zA-Z0-9$_]*", "name": "storage.type.generic.java"}, map[string]interface{}{"match": "\\?", "name": "storage.type.generic.wildcard.java"}, map[string]interface{}{"match": "&", "name": "punctuation.separator.types.java"}, map[string]interface{}{"match": ",", "name": "punctuation.separator.delimiter.java"}, map[string]interface{}{"include": "#parens"}, map[string]interface{}{"include": "#generics"}, map[string]interface{}{"include": "#comments"}}}, "enums": map[string]interface{}{"name": "meta.enum.java", "patterns": []interface{}{map[string]interface{}{"begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.enum.begin.bracket.curly.java"}}, "end": "(?=})", "patterns": []interface{}{map[string]interface{}{"match": "\\w+", "name": "constant.other.enum.java"}, map[string]interface{}{"include": "#class-body"}}}, map[string]interface{}{"include": "#comments"}}, "begin": "^\\s*(enum)\\s+(\\w+)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.modifier.java"}, "2": map[string]interface{}{"name": "entity.name.type.enum.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.enum.end.bracket.curly.java"}}}, "constants-and-special-vars": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\b(true|false|null)\\b", "name": "constant.language.java"}, map[string]interface{}{"match": "\\bthis\\b", "name": "variable.language.this.java"}, map[string]interface{}{"match": "\\bsuper\\b", "name": "variable.language.java"}}}, "variables": map[string]interface{}{"end": "(?=;)", "name": "meta.definition.variable.java", "patterns": []interface{}{map[string]interface{}{"match": "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(;|=|,))", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "variable.other.definition.java"}}}, map[string]interface{}{"include": "#all-types"}, map[string]interface{}{"begin": "=", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.operator.assignment.java"}}, "end": "(?=;)", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}}, map[string]interface{}{"include": "#code"}}, "begin": "(?x:(?=\n  (\n    (void|boolean|byte|char|short|int|float|long|double)\n    |\n    ((\\w+\\.)*[A-Z]+\\w*) # e.g. `javax.ws.rs.Response`, or `String`\n  )\n  ([\\w<>\\[\\],][\\w<>\\[\\],?\\s]*)?\n  \\s+\n  [A-Za-z_$][\\w$]* # At least one identifier after space\n  ([\\w\\[\\],$][\\w\\[\\],\\s]*)? # possibly primitive array or additional identifiers\n  \\s*(=|;)\n))"}, "properties": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}, "2": map[string]interface{}{"name": "variable.other.object.property.java"}}}, map[string]interface{}{"match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}, "2": map[string]interface{}{"name": "variable.other.property.java"}}}, map[string]interface{}{"match": "(\\.)\\s*([0-9][\\w$]*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.separator.period.java"}, "2": map[string]interface{}{"name": "invalid.illegal.identifier.java"}}}}}, "annotations": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "constant.other.key.java"}, "2": map[string]interface{}{"name": "keyword.operator.assignment.java"}}, "match": "(\\w*)\\s*(=)"}, map[string]interface{}{"include": "#code"}}, "begin": "(@[^ (]+)(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.type.annotation.java"}, "2": map[string]interface{}{"name": "punctuation.definition.annotation-arguments.begin.bracket.round.java"}}, "end": "(\\))", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.annotation-arguments.end.bracket.round.java"}}, "name": "meta.declaration.annotation.java"}, map[string]interface{}{"match": "@\\w*", "name": "storage.type.annotation.java"}}}, "static-initializer": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#anonymous-block-and-instance-initializer"}, map[string]interface{}{"match": "static", "name": "storage.modifier.java"}}}, "try-catch-finally": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#code"}}, "begin": "\\(", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.try.resources.begin.bracket.round.java"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.try.resources.end.bracket.round.java"}}, "name": "meta.try.resources.java"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.try.begin.bracket.curly.java"}}, "end": "(?=})", "contentName": "meta.try.body.java", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}, "begin": "{"}}, "begin": "\\btry\\b", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.try.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.try.end.bracket.curly.java"}}, "name": "meta.try.java"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.parameters.end.bracket.round.java"}}, "contentName": "meta.catch.parameters.java", "patterns": []interface{}{map[string]interface{}{"include": "#parameters"}}, "begin": "\\(", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.parameters.begin.bracket.round.java"}}}, map[string]interface{}{"begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.catch.begin.bracket.curly.java"}}, "end": "(?=})", "contentName": "meta.catch.body.java", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}}}, "begin": "\\b(catch)\\b\\s*(?=\\(\\s*[^\\s]+\\s*[^)]+\\))", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.control.catch.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.catch.end.bracket.curly.java"}}, "name": "meta.catch.java"}, map[string]interface{}{"begin": "\\bfinally\\b", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "keyword.control.finally.java"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.finally.end.bracket.curly.java"}}, "name": "meta.finally.java", "patterns": []interface{}{map[string]interface{}{"begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.finally.begin.bracket.curly.java"}}, "end": "(?=})", "contentName": "meta.finally.body.java", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}}}}}}, "methods": map[string]interface{}{"begin": "(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()", "end": "(})|(?=;)", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.section.method.end.bracket.curly.java"}}, "name": "meta.method.java", "patterns": []interface{}{map[string]interface{}{"include": "#storage-modifiers"}, map[string]interface{}{"begin": "(\\w+)\\s*(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.function.java"}, "2": map[string]interface{}{"name": "punctuation.definition.parameters.begin.bracket.round.java"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.parameters.end.bracket.round.java"}}, "name": "meta.method.identifier.java", "patterns": []interface{}{map[string]interface{}{"include": "#parameters"}, map[string]interface{}{"include": "#parens"}, map[string]interface{}{"include": "#comments-inline"}}}, map[string]interface{}{"include": "#generics"}, map[string]interface{}{"begin": "(?=\\w.*\\s+\\w+\\s*\\()", "end": "(?=\\s+\\w+\\s*\\()", "name": "meta.method.return-type.java", "patterns": []interface{}{map[string]interface{}{"include": "#all-types"}, map[string]interface{}{"include": "#parens"}}}, map[string]interface{}{"include": "#throws"}, map[string]interface{}{"end": "(?=})", "contentName": "meta.method.body.java", "patterns": []interface{}{map[string]interface{}{"include": "#code"}}, "begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.method.begin.bracket.curly.java"}}}, map[string]interface{}{"include": "#comments"}}}, "primitive-arrays": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"include": "#parens"}}, "begin": "\\b(void|boolean|byte|char|short|int|float|long|double)\\b\\s*(?=\\[)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "storage.type.primitive.array.java"}}, "end": "(?!\\s*\\[)"}}}}}, map[string]interface{}{"scopeName": "source.json", "name": "JSON", "fileTypes": []interface{}{"avsc", "babelrc", "bowerrc", "composer.lock", "geojson", "gltf", "ipynb", "jscsrc", "jshintrc", "jslintrc", "json", "jsonl", "jsonld", "languagebabel", "ldj", "ldjson", "schema", "stylintrc", "template", "tern-config", "tern-project", "tfstate", "tfstate.backup", "topojson", "webapp", "webmanifest"}, "patterns": []interface{}{map[string]interface{}{"include": "#value"}}, "repository": map[string]interface{}{"object": map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.dictionary.begin.json"}}, "end": "}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.dictionary.end.json"}}, "name": "meta.structure.dictionary.json", "patterns": []interface{}{map[string]interface{}{"end": "(?<=\")", "name": "meta.structure.dictionary.key.json", "patterns": []interface{}{map[string]interface{}{"include": "#string"}}, "begin": "(?=\")"}, map[string]interface{}{"name": "meta.structure.dictionary.value.json", "patterns": []interface{}{map[string]interface{}{"include": "#value"}, map[string]interface{}{"match": "[^\\s,]", "name": "invalid.illegal.expected-dictionary-separator.json"}}, "begin": ":", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.separator.dictionary.key-value.json"}}, "end": "(,)(?=[\\s\\n]*})|(,)|(?=})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.trailing-dictionary-separator.json"}, "2": map[string]interface{}{"name": "punctuation.separator.dictionary.pair.json"}}}, map[string]interface{}{"match": "[^\\s}]", "name": "invalid.illegal.expected-dictionary-separator.json"}}, "begin": "{"}, "string": map[string]interface{}{"end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.json"}}, "name": "string.quoted.double.json", "patterns": []interface{}{map[string]interface{}{"match": "(?x)\n\\\\                # a literal backslash\n(                   # followed by\n  [\"\\\\/bfnrt]     # one of these characters\n  |                 # or\n  u[0-9a-fA-F]{4}   # a u and four hex digits\n)", "name": "constant.character.escape.json"}, map[string]interface{}{"match": "\\\\.", "name": "invalid.illegal.unrecognized-string-escape.json"}}, "begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.json"}}}, "value": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#constant"}, map[string]interface{}{"include": "#number"}, map[string]interface{}{"include": "#string"}, map[string]interface{}{"include": "#array"}, map[string]interface{}{"include": "#object"}}}, "array": map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.array.begin.json"}}, "end": "(,)?[\\s\\n]*(\\])", "endCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.definition.array.end.json"}, "1": map[string]interface{}{"name": "invalid.illegal.trailing-array-separator.json"}}, "name": "meta.structure.array.json", "patterns": []interface{}{map[string]interface{}{"include": "#value"}, map[string]interface{}{"name": "punctuation.separator.array.json", "match": ","}, map[string]interface{}{"match": "[^\\s\\]]", "name": "invalid.illegal.expected-array-separator.json"}}, "begin": "\\["}, "constant": map[string]interface{}{"match": "\\b(true|false|null)\\b", "name": "constant.language.json"}, "number": map[string]interface{}{"match": "-?(?=[1-9]|0(?!\\d))\\d+(\\.\\d+)?([eE][+-]?\\d+)?", "name": "constant.numeric.json"}}}, map[string]interface{}{"name": "Markdown", "scopeName": "source.md", "fileTypes": []interface{}{"markdown", "md", "mdown", "mkd", "mkdown", "rmd", "ron", "emdee", "spec"}, "patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines"}, map[string]interface{}{"include": "#flavors"}}, "repository": map[string]interface{}{"inlines-in-inlines": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#escapes"}, map[string]interface{}{"include": "#code"}, map[string]interface{}{"include": "#entities"}, map[string]interface{}{"include": "#html"}, map[string]interface{}{"include": "#liquid"}, map[string]interface{}{"include": "#links"}, map[string]interface{}{"include": "#emphasis"}, map[string]interface{}{"include": "#todo"}, map[string]interface{}{"include": "#references"}, map[string]interface{}{"include": "#github-inlines"}, map[string]interface{}{"include": "#criticmark"}}}, "fenced-code": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "^\\s{0,3}([`]{3,})$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s{0,3}(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "source.md"}, map[string]interface{}{"name": "fenced.code.md", "contentName": "source.md", "begin": "^\\s{0,3}([~]{3,})$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s{0,3}(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}}}, "ia-writer": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?x) ^\\s{0,3}( (/)([^'\"()]*?) (\\.[a-z0-9]+) (\\s*?) ((\"|')[^'\"]*?(\\7))? )$", "captures": map[string]interface{}{"6": map[string]interface{}{"name": "title.string.markup.md"}, "7": map[string]interface{}{"name": "punctuation.md"}, "8": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "block.content.link.markup.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?x) ^\\s{0,3}( (/)([^'\"()]*?) (\\.[a-z0-9]+) (\\s*?) ((\\()[^()]*?(\\)))? )$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "block.content.link.markup.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"name": "title.string.markup.md"}, "7": map[string]interface{}{"name": "punctuation.md"}, "8": map[string]interface{}{"name": "punctuation.md"}}}}}, "math-block": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "^(\\${2})(?:.*)$", "end": "^(\\${2})(?:.*)$", "patterns": []interface{}{map[string]interface{}{"include": "text.tex.latex"}}, "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "block.math.markup.md"}}}, "math-inline": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "inline.math.markup.md", "match": "(\\$)(?! )(.+?)(?<! )(\\$)(?!\\d)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "text.tex.latex"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "rmarkdown": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "begin": "(?x) (```)( (\\{)(r)(?:\\s)? (?:([a-zA-Z0-9|_|-]*)(?=[\\s|,|}])\\s?)? ([^\\}]*)? (\\}) )", "end": "^(\\1)$", "name": "fenced.code.md", "contentName": "embedded.source.r", "patterns": []interface{}{map[string]interface{}{"include": "source.r"}}, "beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "4": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "label.string.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#rmarkdown-attributes"}}}}}}}, "special-attributes": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "special-attributes.raw.markup.md", "match": "^(\\{)([^\\}]*)(\\})$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "link-label": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "label.link.string.md", "match": "^(\\*?\\[\\^?)(.*)(\\])$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#references"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "references": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?x) (?<=^|\\s|\"|'|\\(|\\[) ( (-?@) ( [a-zA-Z0-9_] [a-zA-Z0-9_:.#$%&+?<>~/-]* (?<![:|.|+|?|<|>|/|-]) ) )", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.md"}}, "name": "reference.variable.md"}}}, "inlines": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#escapes"}, map[string]interface{}{"include": "#code"}, map[string]interface{}{"include": "#entities"}, map[string]interface{}{"include": "#links"}, map[string]interface{}{"include": "#html"}, map[string]interface{}{"include": "#liquid"}, map[string]interface{}{"include": "#emphasis"}, map[string]interface{}{"include": "#line-breaks"}, map[string]interface{}{"include": "#todo"}, map[string]interface{}{"include": "#references"}, map[string]interface{}{"include": "#github-inlines"}, map[string]interface{}{"include": "#math-inline"}}}, "flavors": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#criticmark"}, map[string]interface{}{"include": "#github-inlines"}, map[string]interface{}{"include": "#markdown-extra"}, map[string]interface{}{"include": "#pandoc"}, map[string]interface{}{"include": "#ia-writer"}}}, "github-inlines": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "reference.gfm.variable.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "issue.gfm.md"}}, "match": "(?<=^|\\s|\"|'|\\(|\\[)((#|GH-)(\\d+))(?=[\\s\"'\\.,;:\\)\\]])"}, map[string]interface{}{"match": "(?<![0-9a-f])(([a-zA-Z0-9][a-zA-Z0-9\\-]*)(/)([a-zA-Z0-9][a-zA-Z0-9\\-\\._]*)((#)(\\d+)))(?![0-9a-f])", "name": "reference.gfm.variable.md", "captures": map[string]interface{}{"7": map[string]interface{}{"name": "issue.gfm.md"}, "2": map[string]interface{}{"name": "user.gfm.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "4": map[string]interface{}{"name": "repository.gfm.md"}, "6": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<![0-9a-f])(([a-zA-Z0-9][a-zA-Z0-9\\-]*)(/)([a-zA-Z0-9][a-zA-Z0-9\\-\\._]*)(@)(([0-9a-f]{7})([0-9a-f]{33})))(?![0-9a-f])", "name": "reference.gfm.variable.md", "captures": map[string]interface{}{"5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"name": "sha.gfm.md"}, "8": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "user.gfm.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "4": map[string]interface{}{"name": "repository.gfm.md"}}}, map[string]interface{}{"match": "(?<![0-9a-f])(([a-zA-Z0-9][a-zA-Z0-9\\-]*)(@)(([0-9a-f]{7})([0-9a-f]{33})))(?![0-9a-f])", "name": "reference.gfm.variable.md", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "user.gfm.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "4": map[string]interface{}{"name": "sha.gfm.md"}, "6": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "reference.gfm.variable.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "sha.gfm.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}, "match": "(?<![0-9a-f])(([0-9a-f]{7})([0-9a-f]{33}))(?![0-9a-f])"}, map[string]interface{}{"match": "({)([A-Z][a-zA-Z]+)(})", "name": "class.reference.gfm.variable.md", "captures": map[string]interface{}{"3": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "instance.method.reference.gfm.variable.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}, "match": "({)([A-Z][a-zA-Z]+)(::)([a-z][a-zA-Z]+)(})"}, map[string]interface{}{"match": "({)([A-Z][a-zA-Z]+)(.)([a-z][a-zA-Z]+)(})", "name": "class.method.reference.gfm.variable.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=^|[^\\w\\d~])(~~)(?!~)(.+?)(~~(?=$|[^\\w\\d~]))", "name": "strike.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=^|\\s)(:)(\\+1|\\-1|100|1234|8ball|a|ab|abc|abcd|accept|aerial_tramway|airplane|alarm_clock|alien|ambulance|anchor|angel|anger|angry|anguished|ant|apple|aquarius|aries|arrow_backward|arrow_double_down|arrow_double_up|arrow_down|arrow_down_small|arrow_forward|arrow_heading_down|arrow_heading_up|arrow_left|arrow_lower_left|arrow_lower_right|arrow_right|arrow_right_hook|arrow_up|arrow_up_down|arrow_up_small|arrow_upper_left|arrow_upper_right|arrows_clockwise|arrows_counterclockwise|art|articulated_lorry|astonished|atm|b|baby|baby_bottle|baby_chick|baby_symbol|back|baggage_claim|balloon|ballot_box_with_check|bamboo|banana|bangbang|bank|bar_chart|barber|baseball|basketball|bath|bathtub|battery|bear|bee|beer|beers|beetle|beginner|bell|bento|bicyclist|bike|bikini|bird|birthday|black_circle|black_joker|black_medium_small_square|black_medium_square|black_nib|black_small_square|black_square|black_square_button|blossom|blowfish|blue_book|blue_car|blue_heart|blush|boar|boat|bomb|book|bookmark|bookmark_tabs|books|boom|boot|bouquet|bow|bowling|bowtie|boy|bread|bride_with_veil|bridge_at_night|briefcase|broken_heart|bug|bulb|bullettrain_front|bullettrain_side|bus|busstop|bust_in_silhouette|busts_in_silhouette|cactus|cake|calendar|calling|camel|camera|cancer|candy|capital_abcd|capricorn|car|card_index|carousel_horse|cat|cat2|cd|chart|chart_with_downwards_trend|chart_with_upwards_trend|checkered_flag|cherries|cherry_blossom|chestnut|chicken|children_crossing|chocolate_bar|christmas_tree|church|cinema|circus_tent|city_sunrise|city_sunset|cl|clap|clapper|clipboard|clock1|clock10|clock1030|clock11|clock1130|clock12|clock1230|clock130|clock2|clock230|clock3|clock330|clock4|clock430|clock5|clock530|clock6|clock630|clock7|clock730|clock8|clock830|clock9|clock930|closed_book|closed_lock_with_key|closed_umbrella|cloud|clubs|cn|cocktail|coffee|cold_sweat|collision|computer|confetti_ball|confounded|confused|congratulations|construction|construction_worker|convenience_store|cookie|cool|cop|copyright|corn|couple|couple_with_heart|couplekiss|cow|cow2|credit_card|crocodile|crossed_flags|crown|cry|crying_cat_face|crystal_ball|cupid|curly_loop|currency_exchange|curry|custard|customs|cyclone|dancer|dancers|dango|dart|dash|date|de|deciduous_tree|department_store|diamond_shape_with_a_dot_inside|diamonds|disappointed|disappointed_relieved|dizzy|dizzy_face|do_not_litter|dog|dog2|dollar|dolls|dolphin|donut|door|doughnut|dragon|dragon_face|dress|dromedary_camel|droplet|dvd|e\\-mail|ear|ear_of_rice|earth_africa|earth_americas|earth_asia|egg|eggplant|eight|eight_pointed_black_star|eight_spoked_asterisk|electric_plug|elephant|email|end|envelope|es|euro|european_castle|european_post_office|evergreen_tree|exclamation|expressionless|eyeglasses|eyes|facepunch|factory|fallen_leaf|family|fast_forward|fax|fearful|feelsgood|feet|ferris_wheel|file_folder|finnadie|fire|fire_engine|fireworks|first_quarter_moon|first_quarter_moon_with_face|fish|fish_cake|fishing_pole_and_fish|fist|five|flags|flashlight|floppy_disk|flower_playing_cards|flushed|foggy|football|fork_and_knife|fountain|four|four_leaf_clover|fr|free|fried_shrimp|fries|frog|frowning|fu|fuelpump|full_moon|full_moon_with_face|game_die|gb|gem|gemini|ghost|gift|gift_heart|girl|globe_with_meridians|goat|goberserk|godmode|golf|grapes|green_apple|green_book|green_heart|grey_exclamation|grey_question|grimacing|grin|grinning|guardsman|guitar|gun|haircut|hamburger|hammer|hamster|hand|handbag|hankey|hash|hatched_chick|hatching_chick|headphones|hear_no_evil|heart|heart_decoration|heart_eyes|heart_eyes_cat|heartbeat|heartpulse|hearts|heavy_check_mark|heavy_division_sign|heavy_dollar_sign|heavy_exclamation_mark|heavy_minus_sign|heavy_multiplication_x|heavy_plus_sign|helicopter|herb|hibiscus|high_brightness|high_heel|hocho|honey_pot|honeybee|horse|horse_racing|hospital|hotel|hotsprings|hourglass|hourglass_flowing_sand|house|house_with_garden|hurtrealbad|hushed|ice_cream|icecream|id|ideograph_advantage|imp|inbox_tray|incoming_envelope|information_desk_person|information_source|innocent|interrobang|iphone|it|izakaya_lantern|jack_o_lantern|japan|japanese_castle|japanese_goblin|japanese_ogre|jeans|joy|joy_cat|jp|key|keycap_ten|kimono|kiss|kissing|kissing_cat|kissing_closed_eyes|kissing_face|kissing_heart|kissing_smiling_eyes|koala|koko|kr|large_blue_circle|large_blue_diamond|large_orange_diamond|last_quarter_moon|last_quarter_moon_with_face|laughing|leaves|ledger|left_luggage|left_right_arrow|leftwards_arrow_with_hook|lemon|leo|leopard|libra|light_rail|link|lips|lipstick|lock|lock_with_ink_pen|lollipop|loop|loudspeaker|love_hotel|love_letter|low_brightness|m|mag|mag_right|mahjong|mailbox|mailbox_closed|mailbox_with_mail|mailbox_with_no_mail|man|man_with_gua_pi_mao|man_with_turban|mans_shoe|maple_leaf|mask|massage|meat_on_bone|mega|melon|memo|mens|metal|metro|microphone|microscope|milky_way|minibus|minidisc|mobile_phone_off|money_with_wings|moneybag|monkey|monkey_face|monorail|moon|mortar_board|mount_fuji|mountain_bicyclist|mountain_cableway|mountain_railway|mouse|mouse2|movie_camera|moyai|muscle|mushroom|musical_keyboard|musical_note|musical_score|mute|nail_care|name_badge|neckbeard|necktie|negative_squared_cross_mark|neutral_face|new|new_moon|new_moon_with_face|newspaper|ng|nine|no_bell|no_bicycles|no_entry|no_entry_sign|no_good|no_mobile_phones|no_mouth|no_pedestrians|no_smoking|non\\-potable_water|nose|notebook|notebook_with_decorative_cover|notes|nut_and_bolt|o|o2|ocean|octocat|octopus|oden|office|ok|ok_hand|ok_woman|older_man|older_woman|on|oncoming_automobile|oncoming_bus|oncoming_police_car|oncoming_taxi|one|open_file_folder|open_hands|open_mouth|ophiuchus|orange_book|outbox_tray|ox|package|page_facing_up|page_with_curl|pager|palm_tree|panda_face|paperclip|parking|part_alternation_mark|partly_sunny|passport_control|paw_prints|peach|pear|pencil|pencil2|penguin|pensive|performing_arts|persevere|person_frowning|person_with_blond_hair|person_with_pouting_face|phone|pig|pig2|pig_nose|pill|pineapple|pisces|pizza|plus1|point_down|point_left|point_right|point_up|point_up_2|police_car|poodle|poop|post_office|postal_horn|postbox|potable_water|pouch|poultry_leg|pound|pouting_cat|pray|princess|punch|purple_heart|purse|pushpin|put_litter_in_its_place|question|rabbit|rabbit2|racehorse|radio|radio_button|rage|rage1|rage2|rage3|rage4|railway_car|rainbow|raised_hand|raised_hands|raising_hand|ram|ramen|rat|recycle|red_car|red_circle|registered|relaxed|relieved|repeat|repeat_one|restroom|revolving_hearts|rewind|ribbon|rice|rice_ball|rice_cracker|rice_scene|ring|rocket|roller_coaster|rooster|rose|rotating_light|round_pushpin|rowboat|ru|rugby_football|runner|running|running_shirt_with_sash|sa|sagittarius|sailboat|sake|sandal|santa|satellite|satisfied|saxophone|school|school_satchel|scissors|scorpius|scream|scream_cat|scroll|seat|secret|see_no_evil|seedling|seven|shaved_ice|sheep|shell|ship|shipit|shirt|shit|shoe|shower|signal_strength|six|six_pointed_star|ski|skull|sleeping|sleepy|slot_machine|small_blue_diamond|small_orange_diamond|small_red_triangle|small_red_triangle_down|smile|smile_cat|smiley|smiley_cat|smiling_imp|smirk|smirk_cat|smoking|snail|snake|snowboarder|snowflake|snowman|sob|soccer|soon|sos|sound|space_invader|spades|spaghetti|sparkle|sparkler|sparkles|sparkling_heart|speak_no_evil|speaker|speech_balloon|speedboat|squirrel|star|star2|stars|station|statue_of_liberty|steam_locomotive|stew|straight_ruler|strawberry|stuck_out_tongue|stuck_out_tongue_closed_eyes|stuck_out_tongue_winking_eye|sun_with_face|sunflower|sunglasses|sunny|sunrise|sunrise_over_mountains|surfer|sushi|suspect|suspension_railway|sweat|sweat_drops|sweat_smile|sweet_potato|swimmer|symbols|syringe|tada|tanabata_tree|tangerine|taurus|taxi|tea|telephone|telephone_receiver|telescope|tennis|tent|thought_balloon|three|thumbsdown|thumbsup|ticket|tiger|tiger2|tired_face|tm|toilet|tokyo_tower|tomato|tongue|top|tophat|tractor|traffic_light|train|train2|tram|triangular_flag_on_post|triangular_ruler|trident|triumph|trolleybus|trollface|trophy|tropical_drink|tropical_fish|truck|trumpet|tshirt|tulip|turtle|tv|twisted_rightwards_arrows|two|two_hearts|two_men_holding_hands|two_women_holding_hands|u5272|u5408|u55b6|u6307|u6708|u6709|u6e80|u7121|u7533|u7981|u7a7a|uk|umbrella|unamused|underage|unlock|up|us|v|vertical_traffic_light|vhs|vibration_mode|video_camera|video_game|violin|virgo|volcano|vs|walking|waning_crescent_moon|waning_gibbous_moon|warning|watch|water_buffalo|watermelon|wave|wavy_dash|waxing_crescent_moon|waxing_gibbous_moon|wc|weary|wedding|whale|whale2|wheelchair|white_check_mark|white_circle|white_flower|white_large_square|white_medium_small_square|white_medium_square|white_small_square|white_square_button|wind_chime|wine_glass|wink|wolf|woman|womans_clothes|womans_hat|womens|worried|wrench|x|yellow_heart|yen|yum|zap|zero|zzz)(:)(?=\\s)", "name": "emoji.constant.gfm.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "special-attribute-elements": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "id.special.attribute.meta.md", "match": "(?<=^|\\s)(#)([^\\s|\\}]*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "class.special.attribute.meta.md", "match": "(\\.)([^\\s|\\}]*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "other.special.attribute.meta.md", "captures": map[string]interface{}{"3": map[string]interface{}{"name": "value.string.md"}, "1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "match": "([^ ]+)(=)([^\\s|\\}]*)"}}}, "html": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "text.html.basic"}}}, "line-breaks": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(  )$", "name": "line-break.constant.md"}, map[string]interface{}{"match": "(\\\\)$", "name": "line-break.constant.md"}}}, "front-matter": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "\\A---$", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "hr.constant.md"}}, "end": "^(---|\\.\\.\\.)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "hr.constant.md"}}, "name": "front-matter.yaml.source.md", "patterns": []interface{}{map[string]interface{}{"include": "source.yaml"}}}, map[string]interface{}{"name": "front-matter.toml.source.md", "patterns": []interface{}{map[string]interface{}{"include": "source.toml"}}, "begin": "\\A\\+\\+\\+$", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "hr.constant.md"}}, "end": "^\\+\\+\\+$", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "hr.constant.md"}}}, map[string]interface{}{"end": "^;{3}$", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "hr.constant.md"}}, "name": "front-matter.json.source.md", "patterns": []interface{}{map[string]interface{}{"include": "source.json"}}, "begin": "\\A;{3}$", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "hr.constant.md"}}}}}, "pandoc": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "table.storage.md", "match": "^(\\+-+)+\\+$", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "table.storage.md", "match": "^(\\+=+)+\\+$", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.md"}}}}}, "link-title": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "title.link.md", "match": "^(['|\"])(.*)(\\1)$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "title.link.md", "match": "^(\\()(.*)(\\))$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "liquid": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "text.html.liquid"}}}, "hr": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "hr.constant.md", "match": "^[ ]{0,3}[-]{1,} *[-]{1,} *[-]{1,}[ -]*$"}, map[string]interface{}{"name": "hr.constant.md", "match": "^[ ]{0,3}[*]{1,} *[*]{1,} *[*]{1,}[ *]*$"}, map[string]interface{}{"name": "hr.constant.md", "match": "^[ ]{0,3}[_]{1,} *[_]{1,} *[_]{1,}[ _]*$"}}}, "markdown-extra": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "definition.list.markup.md", "match": "^(?:\\s*)(:)( +)(.*)$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "abbreviation.reference.link.markup.md", "match": "^((?:\\*\\[)(?:[^\\]]+)(?:\\]))(:) (.*)$", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}, "2": map[string]interface{}{"name": "punctuation.md"}}}}}, "fenced-code-blocks": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "text.html.markdown.source.gfm.apib"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:apib|apiblueprint))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.text.html.markdown.source.gfm.apib"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "source.ass"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:ass))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.ass"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.coffee", "patterns": []interface{}{map[string]interface{}{"include": "source.coffee"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:coffee|coffeescript|coffee-script))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:c))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.c", "patterns": []interface{}{map[string]interface{}{"include": "source.c"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.clean", "patterns": []interface{}{map[string]interface{}{"include": "source.clean"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:clean))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.clojure", "patterns": []interface{}{map[string]interface{}{"include": "source.clojure"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:clojure))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.cpp", "patterns": []interface{}{map[string]interface{}{"include": "source.cpp"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:cpp|c\\+\\+))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$"}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.crystal", "patterns": []interface{}{map[string]interface{}{"include": "source.crystal"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:cr|crystal))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:cs|csharp))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.cs", "patterns": []interface{}{map[string]interface{}{"include": "source.cs"}}}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:css))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.css", "patterns": []interface{}{map[string]interface{}{"include": "source.css"}}}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.diff", "patterns": []interface{}{map[string]interface{}{"include": "source.diff"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:diff|patch|rej))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"contentName": "embedded.source.elixir", "patterns": []interface{}{map[string]interface{}{"include": "source.elixir"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:elixir))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md"}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:elm))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.elm", "patterns": []interface{}{map[string]interface{}{"include": "source.elm"}}}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "source.erlang"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:erlang))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.erlang"}, map[string]interface{}{"name": "fenced.code.md", "contentName": "embedded.source.go", "patterns": []interface{}{map[string]interface{}{"include": "source.go"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:go|golang))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "fenced.code.md", "contentName": "embedded.source.haskell", "patterns": []interface{}{map[string]interface{}{"include": "source.haskell"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:haskell))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.text.html.basic", "patterns": []interface{}{map[string]interface{}{"include": "text.html.basic"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:html))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.idris", "patterns": []interface{}{map[string]interface{}{"include": "source.idris"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:idris))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:java))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.java", "patterns": []interface{}{map[string]interface{}{"include": "source.java"}}}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.js", "patterns": []interface{}{map[string]interface{}{"include": "source.js"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:javascript|js|jsx))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}}, "end": "^\\s*(\\1)$"}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.json", "patterns": []interface{}{map[string]interface{}{"include": "source.json"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:json|har))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$"}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:julia))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.julia", "patterns": []interface{}{map[string]interface{}{"include": "source.julia"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.text.tex.latex", "patterns": []interface{}{map[string]interface{}{"include": "text.tex.latex"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:latex|tex))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "source.css.less"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:less))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.css.less"}, map[string]interface{}{"name": "fenced.code.md", "contentName": "embedded.source.lua", "patterns": []interface{}{map[string]interface{}{"include": "source.lua"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:lua))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.text.md", "patterns": []interface{}{map[string]interface{}{"include": "text.md"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:markdown|mdown|md))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.mathematica", "patterns": []interface{}{map[string]interface{}{"include": "source.mathematica"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:m|mathematica))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:mermaid))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.mermaid", "patterns": []interface{}{map[string]interface{}{"include": "source.mermaid"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.text.html.markdown.source.gfm.mson", "patterns": []interface{}{map[string]interface{}{"include": "text.html.markdown.source.gfm.mson"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:mson))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.objc", "patterns": []interface{}{map[string]interface{}{"include": "source.objc"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:objc|objective-c))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}}}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.python", "patterns": []interface{}{map[string]interface{}{"include": "source.python"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:py|python))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$"}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.r", "patterns": []interface{}{map[string]interface{}{"include": "source.r"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:r))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}}}, map[string]interface{}{"begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:ruby))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.ruby", "patterns": []interface{}{map[string]interface{}{"include": "source.ruby"}}}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.rust", "patterns": []interface{}{map[string]interface{}{"include": "source.rust"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:rust|rs))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}}, "end": "^\\s*(\\1)$"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.sass", "patterns": []interface{}{map[string]interface{}{"include": "source.sass"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:sass))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$"}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.css.scss", "patterns": []interface{}{map[string]interface{}{"include": "source.css.scss"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:scss))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "fenced.code.md", "contentName": "embedded.source.shell", "patterns": []interface{}{map[string]interface{}{"include": "source.shell"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:sh|bash))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.sql", "patterns": []interface{}{map[string]interface{}{"include": "source.sql"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:sql))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$"}, map[string]interface{}{"end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md", "contentName": "embedded.source.swift", "patterns": []interface{}{map[string]interface{}{"include": "source.swift"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:swift))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "fenced.code.md", "contentName": "embedded.text.xml", "patterns": []interface{}{map[string]interface{}{"include": "text.xml"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:xml))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"contentName": "embedded.source", "patterns": []interface{}{map[string]interface{}{"include": "source"}}, "begin": "^\\s*([`~]{3,})\\s*(\\{?)((?:\\.?)(?:[a-zA-Z0-9-_]+))(?=( |$|{))\\s*(\\{?)([^`\\{\\}]*)(\\}?)$", "beginCaptures": map[string]interface{}{"5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attribute-elements"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "language.constant.md"}}, "end": "^\\s*(\\1)$", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "name": "fenced.code.md"}}}, "inlines-in-blocks": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#escapes"}, map[string]interface{}{"include": "#code"}, map[string]interface{}{"include": "#entities"}, map[string]interface{}{"include": "#html"}, map[string]interface{}{"include": "#liquid"}, map[string]interface{}{"include": "#links"}, map[string]interface{}{"include": "#emphasis"}, map[string]interface{}{"include": "#todo"}, map[string]interface{}{"include": "#references"}, map[string]interface{}{"include": "#flavors"}, map[string]interface{}{"include": "#math-inline"}}}, "headings": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "^(?:[ ]{0,3})((?:#{1,6})\\s*(?:#*)\\s*)$", "name": "empty.heading.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "^(#{6})\\s*(#*)\\s*$", "name": "heading-6.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "^(#{5})\\s*(#*)\\s*$", "name": "heading-5.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "^(#{4})\\s*(#*)\\s*$", "name": "heading-4.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "match": "^(#{3})\\s*(#*)\\s*$", "name": "heading-3.md"}, map[string]interface{}{"match": "^(#{2})\\s*(#*)\\s*$", "name": "heading-2.md", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "heading-1.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "match": "^(#{1})\\s*(#*)\\s*$"}}}}}, map[string]interface{}{"match": "^((?: {0,3})(?:#{1,6})(?: +)(?:.+))$", "name": "heading.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "heading-1.md", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}, "patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-blocks"}}, "begin": "^(?: {0,3})(#{1})(?: +)", "end": "(?: ){1}(#*)(?:\\s*)(?:(\\{[[:ascii:]]*\\}))?$"}, map[string]interface{}{"begin": "^(?: {0,3})(#{2})(?: +)", "end": "(?: ){1}(#*)(?:\\s*)(?:(\\{[[:ascii:]]*\\}))?$", "name": "heading-2.md", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "endCaptures": map[string]interface{}{"2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}, "1": map[string]interface{}{"name": "punctuation.md"}}, "patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-blocks"}}}, map[string]interface{}{"begin": "^(?: {0,3})(#{3})(?: +)", "end": "(?: ){1}(#*)(?:\\s*)(?:(\\{[[:ascii:]]*\\}))?$", "name": "heading-3.md", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}, "patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-blocks"}}}, map[string]interface{}{"begin": "^(?: {0,3})(#{4})(?: +)", "end": "(?: ){1}(#*)(?:\\s*)(?:(\\{[[:ascii:]]*\\}))?$", "name": "heading-4.md", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}, "patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-blocks"}}}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-blocks"}}, "begin": "^(?: {0,3})(#{5})(?: +)", "end": "(?: ){1}(#*)(?:\\s*)(?:(\\{[[:ascii:]]*\\}))?$", "name": "heading-5.md", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}}, map[string]interface{}{"endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}, "patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-blocks"}}, "begin": "^(?: {0,3})(#{6})(?: +)", "end": "(?: ){1}(#*)(?:\\s*)(?:(\\{[[:ascii:]]*\\}))?$", "name": "heading-6.md", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}}}}}}}, "quotes": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "^(?: {0,3})(>){1}(?: ){0,1}(.*)$", "name": "quote.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}}}}}, "github-blocks": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "table.storage.md", "match": "^(\\|(?= |:|-)[ |:-]*?)(\\|?)$", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(\\|)(?: ?)(:?)(-+)(:?)(?: ?)(?=\\|| |$)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "alignment.punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}, "4": map[string]interface{}{"name": "alignment.punctuation.md"}}}}}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "table.storage.md", "match": "^(\\|)(?= )(.+)$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<= )\\|(?=$| )", "name": "punctuation.md"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "code": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<!`)(`+)(?!`).+?(?<!`)(\\1)(?!`)", "name": "code.raw.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}}}, "link-destination": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "destination.link.md", "match": "^(<)(.*)(>)$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "uri.underline.link.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "uri.underline.link.md"}}, "name": "destination.link.md", "match": "(.+)"}}}, "todo": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<!\\w)@?(TODO|FIXME|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP)\\b", "name": "storage.type.class.${1:/downcase}.md"}}}, "blocks": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"include": "#front-matter"}, map[string]interface{}{"include": "#hr"}, map[string]interface{}{"include": "#headings"}, map[string]interface{}{"include": "#lists"}, map[string]interface{}{"include": "#quotes"}, map[string]interface{}{"include": "#rmarkdown"}, map[string]interface{}{"include": "#fenced-code-blocks"}, map[string]interface{}{"include": "#fenced-code"}, map[string]interface{}{"include": "#github-blocks"}, map[string]interface{}{"include": "#math-block"}}}, "lists": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "^(?:\\s*)([-+\\*] \\[ \\]\\s?)$", "name": "empty.task.unordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "^(?:\\s*)([0-9]{1,9}[\\.\\)] \\[ \\]\\s)$", "name": "empty.task.ordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "^(?:\\s*)([-+\\*]{1}\\s?)$", "name": "empty.unordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "empty.ordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "match": "^(?:\\s*)([0-9]{1,9}[\\.\\)]\\s?)$"}, map[string]interface{}{"name": "task.unordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}}, "match": "^(?:\\s*)([-+\\*] \\[ \\]\\s)(.*)$"}, map[string]interface{}{"match": "^(?:\\s*)([0-9]{1,9}[\\.\\)] \\[ \\]\\s)(.*)$", "name": "task.ordered.list.markup.md", "captures": map[string]interface{}{"2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}, "1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "^(?:\\s*)([-+\\*] \\[[xX]\\]\\s)(.*)$", "name": "completed.task.unordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}}}, map[string]interface{}{"match": "^(?:\\s*)([0-9]{1,9}[\\.\\)] \\[[xX]\\]\\s)(.*)$", "name": "completed.task.ordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}}}, map[string]interface{}{"match": "^(?:\\s*)([-+\\*]{1}\\s)(.*)$", "name": "unordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}}}, map[string]interface{}{"match": "^(?:\\s*)([0-9]{1,9}[\\.\\)]\\s)(.*)$", "name": "ordered.list.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#blocks"}, map[string]interface{}{"include": "#inlines-in-blocks"}}}}}}}, "criticmark": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "addition.critic.inserted.markup.md", "begin": "({\\+\\+)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "end": "(\\+\\+})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "patterns": []interface{}{map[string]interface{}{"include": "#emphasis"}}}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#emphasis"}}, "name": "deletion.critic.deleted.markup.md", "begin": "({--)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "end": "(--})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"name": "highlight.critic.changed.markup.md", "begin": "({==)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "end": "(==})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "patterns": []interface{}{map[string]interface{}{"include": "#emphasis"}}}, map[string]interface{}{"name": "comment.critic.markup.md", "begin": "({>>)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "username.reference.variable.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "match": "(?<=[\\s|>])((@)(\\w[-\\w:]*))(?=[\\s|:|<])"}, map[string]interface{}{"include": "#emphasis"}}, "end": "(<<})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"end": "(~~})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}, "patterns": []interface{}{map[string]interface{}{"match": "~>", "name": "punctuation.md"}, map[string]interface{}{"include": "#emphasis"}}, "name": "substitution.critic.inserted.markup.md", "begin": "({~~)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}}}}}, "rmarkdown-attributes": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "rmarkdown.attribute.meta.md", "captures": map[string]interface{}{"3": map[string]interface{}{"name": "value.constant.md"}, "1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}, "match": "(?<=^|,|,\\s)(eval|include|purl|collapse|echo|error|message|warning|highlight|prompt|strip\\.white|tidy|autodep|cache|cache\\.lazy|external|fig\\.showtext|sanitize)(=)(TRUE|FALSE)"}, map[string]interface{}{"match": "(?<=^|,|,\\s)(echo|eval|interval|dpi|ffmpeg\\.(?:bitrate|format)|fig\\.(?:height|width|retina)|out\\.(?:height|width))(=)([0-9\\-:\\(\\)]+(cm|in|M|px)?)", "name": "rmarkdown.attribute.meta.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.numeric.constant.md"}, "4": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=^|,|,\\s)(child|code|opts\\.label|R\\.options|ref\\.label|cache\\.(?:comments|vars)|dependson|dev.args|fig\\.(?:cap|ext|process|scap|subcap|showtext)|out\\.(?:extra|height|width)|resize\\.(?:height|width))(=)(NULL)", "name": "rmarkdown.attribute.meta.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.constant.md"}}}, map[string]interface{}{"match": "(?<=^|,|,\\s)(engine)(=)((['|\"])(?:asis|asy|awk|bash|c|cat|coffee|dot|fortran|gawk|groovy|haskell|highlight|lein|mysql|node|perl|psql|python|Rcpp|Rscript|ruby|sas|scala|sed|sh|stan|stata|tikz|zsh)(\\4))", "name": "rmarkdown.attribute.meta.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.string.md"}, "4": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=^|,|,\\s)(results)(=)((['|\"])(?:markup|hide|hold|asis)(\\4))", "name": "rmarkdown.attribute.meta.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.string.md"}, "4": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"captures": map[string]interface{}{"4": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.string.md"}}, "match": "(?<=^|,|,\\s)(fig\\.align)(=)((['|\"])(?:default|left|right|center)(\\4))", "name": "rmarkdown.attribute.meta.md"}, map[string]interface{}{"captures": map[string]interface{}{"4": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.string.md"}}, "match": "(?<=^|,|,\\s)(fig\\.keep)(=)((['|\"])(?:high|all|first|last|none)(\\4))", "name": "rmarkdown.attribute.meta.md"}, map[string]interface{}{"captures": map[string]interface{}{"5": map[string]interface{}{"name": "value.string.md"}, "6": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.storage.md"}, "4": map[string]interface{}{"name": "punctuation.md"}}, "match": "(?<=^|,|,\\s)(dependson|dev|dev\\.args|eval|tidy\\.opts)(=)((?:c|list)(\\()([^\\)]*)(\\)))", "name": "rmarkdown.attribute.meta.md"}, map[string]interface{}{"match": "(?<=^|,|,\\s)(child|code|comment|ffmpeg\\.(?:bitrate|format)|opts\\.label|R\\.options|ref\\.label|cache\\.(?:comments|path|vars)|dependson|anipots|dev|dev\\.args|fig\\.(?:cap|env|ext|lp|path|pos|process|scap|subcap|show)|out\\.(?:extra|height|width))(=)(('|\")[^\\4]+?(\\4))", "name": "rmarkdown.attribute.meta.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "key.keyword.md"}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "value.string.md"}, "4": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"name": "punctuation.md"}}}}}, "entities": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?<=^|\\s)(&)(?=$|\\s|,|!|\\?|\\.)", "name": "ampersand.md"}, map[string]interface{}{"match": "(&)([a-zA-Z0-9]{2,32})(;)", "name": "entity.constant.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(&#)([0-9]{1,8})(;)", "name": "entity.constant.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(&#[x|X])([0-9a-fA-F]{1,8})(;)", "name": "entity.constant.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "link-text": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "text.link.string.md", "match": "(?x) ^(\\[) ( ( (?:!\\[) (?:[^\\[\\]]*) (?:\\]) ) (\\() ([^ [:cntrl:]]+)? (?: (?:\\s+) ( (?:[\"'\\(]) .*? (?:[\"'\\)]) ) (?:\\s*) )? (\\)) (\\{[[:ascii:]]*\\})? ) (\\])", "captures": map[string]interface{}{"8": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}, "1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}, "7": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-title"}}}, "9": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "link.markup.md"}, "4": map[string]interface{}{"name": "punctuation.md"}, "5": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-destination"}}}}}, map[string]interface{}{"name": "image.link.string.md", "match": "^(!\\[)(.*)(\\])$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#emphasis"}, map[string]interface{}{"include": "#code"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "^(\\[)(.*)(\\])$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#emphasis"}, map[string]interface{}{"include": "#code"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}, "name": "text.link.string.md"}}}, "comments": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "comment.md", "begin": "(<!(?:-{2,}))", "end": "((?:-{2,})>)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"name": "punctuation.md"}}}}}, "emphasis": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-inlines"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}, "match": "(?<![\\w|\\\\])([_]{2})(?!\\s)(?m:(.+?))(?<![\\s|\\\\])(\\1)(?!\\w)", "name": "strong.emphasis.bold.markup.md"}, map[string]interface{}{"match": "(?<![\\w|\\\\])([\\*]{2})(?!\\s)(?m:(.+?))(?<![\\s|\\\\])(\\1)(?!\\w)", "name": "strong.emphasis.bold.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-inlines"}}}, "3": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=\\w)([\\*]{2})(?:.+?)(?<!\\W)(\\1)", "name": "strong.emphasis.bold.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=\\s|^)([\\*]{2})(?=\\w)(?:.+?)(\\1)(?=\\w)", "name": "strong.emphasis.bold.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<![\\w|_|\\\\])([_])(?!\\s|\\1)(?m:(.+?))(?<![\\s|\\\\])(\\1)(?!\\w)", "name": "emphasis.italic.markup.md", "captures": map[string]interface{}{"2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-inlines"}}}, "3": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<![\\w|\\*|\\\\])([\\*])(?!\\s|\\1)(?m:(.+?))(?<![\\s|\\\\])(\\1)(?!\\w)", "name": "emphasis.italic.markup.md", "captures": map[string]interface{}{"3": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#inlines-in-inlines"}}}}}, map[string]interface{}{"match": "(?<=\\w)([\\*])(?:.+?)(?<!\\W)(\\1)", "name": "emphasis.italic.markup.md", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?<=\\s|^)([\\*])(?=\\w)(?:.+?)(\\1)(?=\\w)", "name": "emphasis.italic.markup.md", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.md"}, "1": map[string]interface{}{"name": "punctuation.md"}}}}}, "escapes": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\\\.", "name": "escape.constant.md"}}}, "links": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "reference.footnote.link.markup.md", "match": "((?:\\[\\^)(?:[^\\[\\]]+)(?:\\]))(?!:)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}}}, map[string]interface{}{"name": "definition.footnote.link.markup.md", "match": "((?:\\[\\^)(?:[^\\[\\]]+)(?:\\]))(:)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}, "2": map[string]interface{}{"name": "punctuation.md"}}}, map[string]interface{}{"match": "(?x) ( (?:\\[) (?: (?: (?:!\\[) (?:[^\\[\\]]*) (?:\\]) ) (?:\\() (?:[^ [:cntrl:]]+)? (?: (?:\\s+) (?: (?:[\"'\\(]) .*? (?:[\"'\\)]) ) (?:\\s*) )? (?:\\)) (?:\\{[[:ascii:]]*\\})? ) (?:\\]) ) (\\() ([^ [:cntrl:]]+)? (?: (?:\\s+) ( (?:[\"'\\(]) .*? (?:[\"'\\)]) ) (?:\\s*) )? (\\)) (\\{[[:ascii:]]*\\})?", "captures": map[string]interface{}{"3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-destination"}}}, "4": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-title"}}}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}, "1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}, "2": map[string]interface{}{"name": "punctuation.md"}}, "name": "link.markup.md"}, map[string]interface{}{"name": "link.markup.md", "match": "(?x) ( (?:!?\\[) (?:[^\\[\\]]*) (?:\\]) ) (\\() ([^ [:cntrl:]()]+)? (?: (?:\\s+) ( (?:[\"'\\(]) .*? (?:[\"'\\)]) ) (?:\\s*) )? (\\)) (\\{[[:ascii:]]*\\})?", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-destination"}}}, "4": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-title"}}}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}, "1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}}}, map[string]interface{}{"name": "link.markup.md", "match": "(?x) ( (?:!?\\[) (?:[^\\[\\]]*) (?:\\]) ) (\\() (<[^[:cntrl:]]*>) (?: (?:\\s+) ( (?:[\"'\\(]) .*? (?:[\"'\\)]) ) (?:\\s*) )? (\\)) (\\{[[:ascii:]]*\\})?", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-destination"}}}, "4": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-title"}}}, "5": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}}, map[string]interface{}{"name": "link.markup.md", "match": "(?x) ( (?:\\[) (?: (?: (?:!\\[) (?:[^\\[\\]]*) (?:\\]) ) (?:\\() (?:[^ [:cntrl:]]+)? (?: (?:\\s+) (?: (?:[\"'\\(]) .*? (?:[\"'\\)]) ) (?:\\s*) )? (?:\\)) (?:\\{[[:ascii:]]*\\})? ) (?:\\]) ) ( (?:\\[) (?:[^\\[\\]]*) (?:\\]) ) (\\{[[:ascii:]]*\\})?", "captures": map[string]interface{}{"2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}, "1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}, "name": "link.markup.md", "match": "(?x) ( (?:!?\\[) (?:[^\\[\\]]*) (?:\\]) ) ( (?:\\[) (?:[^\\[\\]]*) (?:\\]) ) (\\{[[:ascii:]]*\\})?"}, map[string]interface{}{"name": "link.markup.md", "match": "(?x) ( (?:!\\[) (?:[^\\[\\]]*) (?:\\]) ) (\\{[[:ascii:]]*\\})?", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-text"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}}, map[string]interface{}{"name": "reference.link.markup.md", "match": "(?x) ((?:\\[)(?:[^\\[\\]]*)(?:\\])) (:) (?:\\s) ([^ [:cntrl:]]+) (?:(?:\\s)((?:\")(?:.*?)(?:\")))? (?:(?:\\s)(\\{[[:ascii:]]*\\}))?", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}, "2": map[string]interface{}{"name": "punctuation.md"}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-destination"}}}, "4": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-title"}}}, "5": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}}, map[string]interface{}{"match": "(?x) ( (?:\\[) (?:[^\\[\\]]*) (?:\\]) ) (?!:) (\\{[[:ascii:]]*\\})?", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#link-label"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#special-attributes"}}}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "uri.underline.markup.md"}, "3": map[string]interface{}{"name": "scheme.md"}, "4": map[string]interface{}{"name": "punctuation.md"}}, "name": "auto.link.markup.md", "match": "(?i:(<)((coap|doi|javascript|aaa|aaas|about|acap|cap|cid|crid|data|dav|dict|dns|file|ftp|geo|go|gopher|h323|http|https|iax|icap|im|imap|info|ipp|iris|iris.beep|iris.xpc|iris.xpcs|iris.lwz|ldap|mailto|mid|msrp|msrps|mtqp|mupdate|news|nfs|ni|nih|nntp|opaquelocktoken|pop|pres|rtsp|service|session|shttp|sieve|sip|sips|sms|snmp|soap.beep|soap.beeps|tag|tel|telnet|tftp|thismessage|tn3270|tip|tv|urn|vemmi|ws|wss|xcon|xcon-userid|xmlrpc.beep|xmlrpc.beeps|xmpp|z39.50r|z39.50s|adiumxtra|afp|afs|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|chrome|chrome-extension|com-eventbrite-attendee|content|cvs|dlna-playsingle|dlna-playcontainer|dtn|dvb|ed2k|facetime|feed|finger|fish|gg|git|gizmoproject|gtalk|hcp|icon|ipn|irc|irc6|ircs|itms|jar|jms|keyparc|lastfm|ldaps|magnet|maps|market|message|mms|ms-help|msnim|mumble|mvn|notes|oid|palm|paparazzi|platform|proxy|psyc|query|res|resource|rmi|rsync|rtmp|secondlife|sftp|sgn|skype|smb|soldat|spotify|ssh|steam|svn|teamspeak|things|udp|unreal|ut2004|ventrilo|view-source|webcal|wtai|wyciwyg|xfire|xri|ymsgr):(?:[^ [:cntrl:]<>]+))(>))"}, map[string]interface{}{"name": "email.auto.link.markup.md", "match": "(<)(([a-zA-Z0-9\\.!#$%&'\\*\\+/=?^_`{\\|}~-]+)(@)([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*))(>)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.md"}, "2": map[string]interface{}{"name": "uri.underline.markup.md"}, "4": map[string]interface{}{"name": "punctuation.md"}, "6": map[string]interface{}{"name": "punctuation.md"}}}}}}}, map[string]interface{}{"scopeName": "source.sql", "name": "SQL", "fileTypes": []interface{}{"ddl", "dml", "dsql", "pgsql", "psql", "sql"}, "patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"match": "(?i:^\\s*(create(?:\\s+or\\s+replace)?)\\s+(aggregate|conversion|database|domain|function|group|(unique\\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\b(?:\\s+(if\\s+not\\s+exists)\\b)?)(?:\\s+(['\"`]?)(\\w+)\\5)?", "name": "meta.create.sql", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.create.sql"}, "2": map[string]interface{}{"name": "keyword.other.sql"}, "4": map[string]interface{}{"name": "keyword.other.DML.sql"}, "6": map[string]interface{}{"name": "entity.name.function.sql"}}}, map[string]interface{}{"match": "(?i:^\\s*(drop)\\s+(aggregate|check|constraint|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\b(?:\\s+(if\\s+exists)\\b)?)(?:\\s+(['\"`]?)(\\w+)\\4)?", "name": "meta.drop.sql", "captures": map[string]interface{}{"3": map[string]interface{}{"name": "keyword.other.DML.sql"}, "5": map[string]interface{}{"name": "entity.name.function.sql"}, "1": map[string]interface{}{"name": "keyword.other.drop.sql"}, "2": map[string]interface{}{"name": "keyword.other.sql"}}}, map[string]interface{}{"match": "(?i:^\\s*(add)\\s+(check|constraint|(?:foreign|primary)\\s+key))", "name": "meta.add.sql", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.create.sql"}, "2": map[string]interface{}{"name": "keyword.other.sql"}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.drop.sql"}, "2": map[string]interface{}{"name": "keyword.other.table.sql"}, "3": map[string]interface{}{"name": "entity.name.function.sql"}, "4": map[string]interface{}{"name": "keyword.other.cascade.sql"}}, "match": "(?i:\\s*(drop)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)", "name": "meta.drop.sql"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.create.sql"}, "2": map[string]interface{}{"name": "keyword.other.table.sql"}, "3": map[string]interface{}{"name": "entity.name.function.sql"}, "4": map[string]interface{}{"name": "keyword.other.cascade.sql"}}, "match": "(?i:\\s*(truncate)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)", "name": "meta.truncate.sql"}, map[string]interface{}{"match": "(?i:^\\s*(alter)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+(['\"`]?)(\\w+)\\3)", "name": "meta.alter.sql", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.other.create.sql"}, "2": map[string]interface{}{"name": "keyword.other.table.sql"}, "4": map[string]interface{}{"name": "entity.name.function.sql"}}}, map[string]interface{}{"captures": map[string]interface{}{"2": map[string]interface{}{"name": "storage.type.sql"}, "8": map[string]interface{}{"name": "constant.numeric.sql"}, "15": map[string]interface{}{"name": "storage.type.sql"}, "3": map[string]interface{}{"name": "constant.numeric.sql"}, "7": map[string]interface{}{"name": "constant.numeric.sql"}, "11": map[string]interface{}{"name": "storage.type.sql"}, "5": map[string]interface{}{"name": "constant.numeric.sql"}, "9": map[string]interface{}{"name": "storage.type.sql"}, "6": map[string]interface{}{"name": "storage.type.sql"}, "10": map[string]interface{}{"name": "constant.numeric.sql"}, "12": map[string]interface{}{"name": "storage.type.sql"}, "13": map[string]interface{}{"name": "storage.type.sql"}, "14": map[string]interface{}{"name": "constant.numeric.sql"}, "1": map[string]interface{}{"name": "storage.type.sql"}, "4": map[string]interface{}{"name": "storage.type.sql"}}, "match": "(?xi)\n# normal stuff, capture 1\n\\b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|date|datetime|double\\sprecision|enum|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\\b\n\n# numeric suffix, capture 2 + 3i\n|\\b(bit\\svarying|character\\s(?:varying)?|tinyint|var\\schar|float|interval)\\((\\d+)\\)\n\n# optional numeric suffix, capture 4 + 5i\n|\\b(char|number|n?varchar\\d?)\\b(?:\\((\\d+)\\))?\n\n# special case, capture 6 + 7i + 8i\n|\\b(numeric|decimal)\\b(?:\\((\\d+),(\\d+)\\))?\n\n# special case, captures 9, 10i, 11\n|\\b(times)(?:\\((\\d+)\\))(\\swithoutstimeszone\\b)?\n\n# special case, captures 12, 13, 14i, 15\n|\\b(timestamp(tz)?|time)\\b(?:(s)\\((\\d+)\\)(\\swithoutstimeszone\\b)?)?"}, map[string]interface{}{"match": "(?i:\\b((?:primary|foreign)\\s+key|references|on\\sdelete(\\s+cascade)?|check|constraint|unique|default)\\b)", "name": "storage.modifier.sql"}, map[string]interface{}{"match": "\\b(\\d+\\.\\d+)|(\\d+\\.)|(\\.\\d+)|\\b(\\d+)\\b", "name": "constant.numeric.sql"}, map[string]interface{}{"name": "keyword.other.DML.sql", "match": "(?i:\\b(select(\\s+distinct)?|insert\\s+(ignore\\s+)?into|update|delete|from|use|declare|set|where|group\\s+by|or|like|between|and|(union|except|intersect)(\\s+all)?|having|order\\s+by|partition\\s+by|limit|offset|(inner|cross)\\s+join|join|straight_join|(left|right)(\\s+outer)?\\s+join|natural(\\s+(left|right)(\\s+outer)?)?\\s+join|using|regexp|rlike|with|exists)\\b)"}, map[string]interface{}{"match": "(?i:\\b(on|(is\\s+)?(not\\s+)?null|auto_increment)\\b)", "name": "keyword.other.DDL.create.II.sql"}, map[string]interface{}{"match": "(?i:\\b(values|go|into|exec|openquery)\\b)", "name": "keyword.other.DML.II.sql"}, map[string]interface{}{"match": "(?i:\\b(begin(\\s+work)?|start\\s+transaction|commit(\\s+work)?|rollback(\\s+work)?)\\b)", "name": "keyword.other.LUW.sql"}, map[string]interface{}{"match": "(?i:\\b(grant(\\swith\\sgrant\\soption)?|revoke)\\b)", "name": "keyword.other.authorization.sql"}, map[string]interface{}{"match": "(?i:(\\bnot\\s+)?\\bin\\b)", "name": "keyword.other.data-integrity.sql"}, map[string]interface{}{"match": "(?i:\\bnot\\b)", "name": "keyword.other.not.sql"}, map[string]interface{}{"name": "keyword.other.object-comments.sql", "match": "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)"}, map[string]interface{}{"match": "(?i)\\bAS\\b", "name": "keyword.other.alias.sql"}, map[string]interface{}{"match": "(?i)\\b(DESC|ASC)\\b", "name": "keyword.other.order.sql"}, map[string]interface{}{"match": "(?i)\\b(case|when|then|else|end)\\b", "name": "keyword.other.case.sql"}, map[string]interface{}{"match": "\\*", "name": "keyword.operator.star.sql"}, map[string]interface{}{"match": "[!<>]?=|<>|<|>", "name": "keyword.operator.comparison.sql"}, map[string]interface{}{"name": "keyword.operator.math.sql", "match": "-|\\+|/"}, map[string]interface{}{"match": "\\|\\|", "name": "keyword.operator.concatenator.sql"}, map[string]interface{}{"comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html", "match": "(?i)\\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER|EXTRACT)\\b", "name": "support.function.scalar.sql"}, map[string]interface{}{"name": "support.function.math.sql", "match": "(?i)\\b(ABS|ACOS|ASIN|ATAN|ATAN2|CEIL|CEILING|CONV|COS|COT|CRC32|DEGREES|EXP|FLOOR|LN|LOG|LOG10|LOG2|MOD|PI|POW|POWER|RADIANS|RAND|ROUND|SIGN|SIN|SQRT|TAN|TRUNCATE)\\b"}, map[string]interface{}{"name": "support.function.aggregate.sql", "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html", "match": "(?i)\\b(AVG|COUNT|MIN|MAX|SUM)(?=\\s*\\()"}, map[string]interface{}{"match": "(?i)\\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\\b", "name": "support.function.string.sql"}, map[string]interface{}{"match": "(?i)\\b(ROW_NUMBER|RANK|DENSE_RANK|PERCENT_RANK|CUME_DIST|NTILE|LAG|LEAD|FIRST_VALUE|LAST_VALUE|NTH_VALUE|OVER)\\b", "name": "support.function.window.sql"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "constant.other.database-name.sql"}, "2": map[string]interface{}{"name": "constant.other.table-name.sql"}}, "match": "(\\w+?)\\.(\\w+)"}, map[string]interface{}{"include": "#strings"}, map[string]interface{}{"include": "#regexps"}}, "repository": map[string]interface{}{"string_interpolation": map[string]interface{}{"match": "(#\\{)([^\\}]*)(\\})", "name": "string.interpolated.sql", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}}, "strings": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}, "2": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.", "match": "(')[^'\\\\]*(')", "name": "string.quoted.single.sql"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "name": "string.quoted.single.sql", "patterns": []interface{}{map[string]interface{}{"include": "#string_escape"}}, "begin": "'"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}, "2": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.", "match": "(`)[^`\\\\]*(`)", "name": "string.quoted.other.backtick.sql"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}}, "end": "`", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "name": "string.quoted.other.backtick.sql", "patterns": []interface{}{map[string]interface{}{"include": "#string_escape"}}, "begin": "`"}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}, "2": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.", "match": "(\")[^\"#]*(\")", "name": "string.quoted.double.sql"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#string_interpolation"}}, "begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "name": "string.quoted.double.sql"}, map[string]interface{}{"begin": "%\\{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}}, "end": "\\}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "name": "string.other.quoted.brackets.sql", "patterns": []interface{}{map[string]interface{}{"include": "#string_interpolation"}}}}}, "comments": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "(^[ \\t]+)?(?=--)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.whitespace.comment.leading.sql"}}, "end": "(?!\\G)", "patterns": []interface{}{map[string]interface{}{"name": "comment.line.double-dash.sql", "begin": "--", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.sql"}}, "end": "\\n"}}}, map[string]interface{}{"captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.sql"}}, "end": "\\*/", "name": "comment.block.c", "begin": "/\\*"}}}, "regexps": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"name": "string.regexp.sql", "patterns": []interface{}{map[string]interface{}{"include": "#string_interpolation"}, map[string]interface{}{"match": "\\\\/", "name": "constant.character.escape.slash.sql"}}, "begin": "/(?=\\S.*/)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}}, "end": "/", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}}, map[string]interface{}{"begin": "%r\\{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.sql"}}, "comment": "We should probably handle nested bracket pairs!?! -- Allan", "end": "\\}", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.sql"}}, "name": "string.regexp.modr.sql", "patterns": []interface{}{map[string]interface{}{"include": "#string_interpolation"}}}}}, "string_escape": map[string]interface{}{"match": "\\\\.", "name": "constant.character.escape.sql"}}}, map[string]interface{}{"scopeName": "text.xml", "name": "XML", "fileTypes": []interface{}{"atom", "axml", "bpmn", "config", "cpt", "csl", "csproj", "csproj.user", "dae", "dia", "dita", "ditamap", "dtml", "fodg", "fodp", "fods", "fodt", "fsproj", "fxml", "gir", "glade", "gpx", "graphml", "icls", "iml", "isml", "jmx", "jsp", "launch", "menu", "mxml", "nuspec", "opml", "owl", "pom", "ppj", "proj", "pt", "pubxml", "pubxml.user", "rdf", "rng", "rss", "sdf", "shproj", "sld", "storyboard", "svg", "targets", "tld", "vbox", "vbox-prev", "vbproj", "vbproj.user", "vcproj", "vcproj.filters", "vcxproj", "vcxproj.filters", "wixmsp", "wixmst", "wixobj", "wixout", "wsdl", "wxs", "xaml", "xbl", "xib", "xlf", "xliff", "xml", "xpdl", "xsd", "xul", "ui"}, "firstLineMatch": "(?x)\n# XML declaration\n(?:\n  ^ <\\? xml\n\n  # VersionInfo\n  \\s+ version\n  \\s* = \\s*\n  (['\"])\n    1 \\. [0-9]+\n  \\1\n\n  # EncodingDecl\n  (?:\n    \\s+ encoding\n    \\s* = \\s*\n\n    # EncName\n    (['\"])\n      [A-Za-z]\n      [-A-Za-z0-9._]*\n    \\2\n  )?\n\n  # SDDecl\n  (?:\n    \\s+ standalone\n    \\s* = \\s*\n    (['\"])\n      (?:yes|no)\n    \\3\n  )?\n\n  \\s* \\?>\n)\n|\n# Modeline\n(?i:\n  # Emacs\n  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)\n    xml\n  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-\n  |\n  # Vim\n  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=\n    xml\n  (?=\\s|:|$)\n)", "patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "entity.name.tag.xml"}}, "end": "(\\?>)", "name": "meta.tag.preprocessor.xml", "patterns": []interface{}{map[string]interface{}{"match": " ([a-zA-Z-]+)", "name": "entity.other.attribute-name.xml"}, map[string]interface{}{"include": "#doublequotedString"}, map[string]interface{}{"include": "#singlequotedString"}}, "begin": "(<\\?)\\s*([-_a-zA-Z0-9]+)"}, map[string]interface{}{"begin": "(<!)(DOCTYPE)\\s+([:a-zA-Z_][:a-zA-Z0-9_.-]*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "keyword.other.doctype.xml"}, "3": map[string]interface{}{"name": "variable.language.documentroot.xml"}}, "end": "\\s*(>)", "name": "meta.tag.sgml.doctype.xml", "patterns": []interface{}{map[string]interface{}{"include": "#internalSubset"}}}, map[string]interface{}{"include": "#comments"}, map[string]interface{}{"endCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "3": map[string]interface{}{"name": "entity.name.tag.xml"}, "4": map[string]interface{}{"name": "entity.name.tag.namespace.xml"}, "5": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "6": map[string]interface{}{"name": "entity.name.tag.localname.xml"}, "7": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}}, "name": "meta.tag.no-content.xml", "patterns": []interface{}{map[string]interface{}{"include": "#tagStuff"}}, "begin": "(<)((?:([-_a-zA-Z0-9]+)(:))?([-_a-zA-Z0-9:]+))(?=(\\s[^>]*)?></\\2>)", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "entity.name.tag.xml"}, "3": map[string]interface{}{"name": "entity.name.tag.namespace.xml"}, "4": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "5": map[string]interface{}{"name": "entity.name.tag.localname.xml"}}, "end": "(>)(</)((?:([-_a-zA-Z0-9]+)(:))?([-_a-zA-Z0-9:]+))(>)"}, map[string]interface{}{"begin": "(</?)(?:([-\\w\\.]+)((:)))?([-\\w\\.:]+)", "captures": map[string]interface{}{"5": map[string]interface{}{"name": "entity.name.tag.localname.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "entity.name.tag.namespace.xml"}, "3": map[string]interface{}{"name": "entity.name.tag.xml"}, "4": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}}, "end": "(/?>)", "name": "meta.tag.xml", "patterns": []interface{}{map[string]interface{}{"include": "#tagStuff"}}}, map[string]interface{}{"include": "#entity"}, map[string]interface{}{"include": "#bare-ampersand"}, map[string]interface{}{"begin": "<%@", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.begin.xml"}}, "end": "%>", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.end.xml"}}, "name": "source.java-props.embedded.xml", "patterns": []interface{}{map[string]interface{}{"match": "page|include|taglib", "name": "keyword.other.page-props.xml"}}}, map[string]interface{}{"name": "source.java.embedded.xml", "patterns": []interface{}{map[string]interface{}{"include": "source.java"}}, "begin": "<%[!=]?(?!--)", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.begin.xml"}}, "end": "(?!--)%>", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.end.xml"}}}, map[string]interface{}{"begin": "<!\\[CDATA\\[", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.xml"}}, "end": "]]>", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.xml"}}, "name": "string.unquoted.cdata.xml"}}, "repository": map[string]interface{}{"comments": map[string]interface{}{"begin": "<[!%]--", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.xml"}}, "end": "--%?>", "name": "comment.block.xml"}, "bare-ampersand": map[string]interface{}{"match": "&", "name": "invalid.illegal.bad-ampersand.xml"}, "doublequotedString": map[string]interface{}{"end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.xml"}}, "name": "string.quoted.double.xml", "patterns": []interface{}{map[string]interface{}{"include": "#entity"}, map[string]interface{}{"include": "#bare-ampersand"}}, "begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.xml"}}}, "entity": map[string]interface{}{"name": "constant.character.entity.xml", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.constant.xml"}, "3": map[string]interface{}{"name": "punctuation.definition.constant.xml"}}, "match": "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)"}, "singlequotedString": map[string]interface{}{"begin": "'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.xml"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.xml"}}, "name": "string.quoted.single.xml", "patterns": []interface{}{map[string]interface{}{"include": "#entity"}, map[string]interface{}{"include": "#bare-ampersand"}}}, "EntityDecl": map[string]interface{}{"begin": "(<!)(ENTITY)\\s+(%\\s+)?([:a-zA-Z_][:a-zA-Z0-9_.-]*)(\\s+(?:SYSTEM|PUBLIC)\\s+)?", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "keyword.other.entity.xml"}, "3": map[string]interface{}{"name": "punctuation.definition.entity.xml"}, "4": map[string]interface{}{"name": "variable.language.entity.xml"}, "5": map[string]interface{}{"name": "keyword.other.entitytype.xml"}}, "end": "(>)", "patterns": []interface{}{map[string]interface{}{"include": "#doublequotedString"}, map[string]interface{}{"include": "#singlequotedString"}}}, "internalSubset": map[string]interface{}{"end": "(\\])", "name": "meta.internalsubset.xml", "patterns": []interface{}{map[string]interface{}{"include": "#EntityDecl"}, map[string]interface{}{"include": "#parameterEntity"}, map[string]interface{}{"include": "#comments"}}, "begin": "(\\[)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.constant.xml"}}}, "parameterEntity": map[string]interface{}{"captures": map[string]interface{}{"3": map[string]interface{}{"name": "punctuation.definition.constant.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.constant.xml"}}, "match": "(%)([:a-zA-Z_][:a-zA-Z0-9_.-]*)(;)", "name": "constant.character.parameter-entity.xml"}, "tagStuff": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"2": map[string]interface{}{"name": "entity.other.attribute-name.xml"}, "3": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "4": map[string]interface{}{"name": "entity.other.attribute-name.localname.xml"}, "1": map[string]interface{}{"name": "entity.other.attribute-name.namespace.xml"}}, "match": "(?:^|\\s+)(?:([-\\w.]+)((:)))?([-\\w.:]+)="}, map[string]interface{}{"include": "#doublequotedString"}, map[string]interface{}{"include": "#singlequotedString"}}}}}, map[string]interface{}{"firstLineMatch": "^(#cloud-config|---)", "patterns": []interface{}{map[string]interface{}{"include": "#erb"}, map[string]interface{}{"include": "#comment"}, map[string]interface{}{"match": "\\t+", "name": "invalid.illegal.whitespace.yaml"}, map[string]interface{}{"match": "^---", "name": "punctuation.definition.directives.end.yaml"}, map[string]interface{}{"begin": "^(\\s*)(?!-\\s*)(\\S+)\\s*(:)(?:\\s+((!)[^!\\s]+))?\\s+(?=\\||>)", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "entity.name.tag.yaml"}, "3": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "4": map[string]interface{}{"name": "keyword.other.tag.local.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.tag.local.yaml"}}, "end": "^(?!\\1\\s+)(?=\\s*(-|[^!@#%&*>,].*:|#))", "contentName": "string.unquoted.block.yaml", "patterns": []interface{}{map[string]interface{}{"include": "#constants"}, map[string]interface{}{"include": "#erb"}}}, map[string]interface{}{"begin": "^(\\s*)(?:(-)|(?:(?:(-)\\s*)?(\\S+)\\s*(:)))(?:\\s+((!)[^!\\s]+))?\\s+(?=\\||>)", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "3": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "4": map[string]interface{}{"name": "entity.name.tag.yaml"}, "5": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "6": map[string]interface{}{"name": "keyword.other.tag.local.yaml"}, "7": map[string]interface{}{"name": "punctuation.definition.tag.local.yaml"}}, "end": "^(?!\\1 \\s+)(?=\\s*(-|[^!@#%&*>,].*:|#))", "contentName": "string.unquoted.block.yaml", "patterns": []interface{}{map[string]interface{}{"include": "#constants"}, map[string]interface{}{"include": "#erb"}}}, map[string]interface{}{"match": "(<<)\\s*(:)\\s+(.+)$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.tag.merge.yaml"}, "2": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#variables"}}}}}, map[string]interface{}{"begin": "(?>^\\s*(-)?\\s*)([^!{@#%&*>,'\"][^#'\"]*?)(:)\\s+((!!)omap)?", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "2": map[string]interface{}{"name": "entity.name.tag.yaml"}, "3": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "4": map[string]interface{}{"name": "keyword.other.omap.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.tag.omap.yaml"}}, "end": "(?=^\\s*(-|[^!{@#%&*>,].*:\\s+))", "patterns": []interface{}{map[string]interface{}{"include": "#scalar-content"}}}, map[string]interface{}{"begin": "(-)?\\s*(?:((')([^']*?)('))|((\")([^\"]*?)(\")))(:)\\s+((!!)omap)?", "beginCaptures": map[string]interface{}{"3": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}, "4": map[string]interface{}{"name": "entity.name.tag.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}, "7": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}, "8": map[string]interface{}{"name": "entity.name.tag.yaml"}, "9": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}, "10": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "1": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "12": map[string]interface{}{"name": "punctuation.definition.tag.omap.yaml"}, "6": map[string]interface{}{"name": "string.quoted.double.yaml"}, "11": map[string]interface{}{"name": "keyword.other.omap.yaml"}, "2": map[string]interface{}{"name": "string.quoted.single.yaml"}}, "end": "(?=^\\s*(-|[^!{@#%&*>,].*:\\s+))", "patterns": []interface{}{map[string]interface{}{"include": "#scalar-content"}}}, map[string]interface{}{"end": "(?=^\\s*(-|[^!{@#%&*>,].*:))", "patterns": []interface{}{map[string]interface{}{"include": "#scalar-content"}}, "begin": "(-)\\s+(?:((!!)omap)|((!)[^!\\s]+)|(?![!@#%&*>,]))", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "2": map[string]interface{}{"name": "keyword.other.omap.yaml"}, "3": map[string]interface{}{"name": "punctuation.definition.tag.omap.yaml"}, "4": map[string]interface{}{"name": "keyword.other.tag.local.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.tag.local.yaml"}}}, map[string]interface{}{"include": "#variables"}, map[string]interface{}{"include": "#strings"}}, "repository": map[string]interface{}{"erb": map[string]interface{}{"name": "meta.embedded.line.ruby", "patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.comment.ruby"}}, "match": "(#).*?(?=%>)", "name": "comment.line.number-sign.ruby"}, map[string]interface{}{"include": "source.ruby.rails"}}, "begin": "<%+(?!>)=?", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.embedded.begin.ruby"}}, "contentName": "source.ruby.rails", "end": "(%)>", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "source.ruby.rails"}, "0": map[string]interface{}{"name": "punctuation.definition.embedded.end.ruby"}}}, "numeric": map[string]interface{}{"match": "(((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?)\\s*($|(?=#)(?!#{))", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "constant.numeric.yaml"}}}, "strings": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}}, "name": "string.quoted.double.yaml", "patterns": []interface{}{map[string]interface{}{"include": "#escaped_char"}, map[string]interface{}{"include": "#erb"}}}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "''", "name": "constant.character.escape.yaml"}, map[string]interface{}{"include": "#erb"}}, "begin": "'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}}, "name": "string.quoted.single.yaml", "applyEndPatternLast": true}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#escaped_char"}, map[string]interface{}{"include": "#erb"}}, "begin": "`", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}}, "end": "`", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}}, "name": "string.interpolated.yaml"}, map[string]interface{}{"match": "[^\\s\"'\\n](?!\\s*#(?!{))([^#\\n]|((?<!\\s)#))*", "name": "string.unquoted.yaml"}}}, "comment": map[string]interface{}{"match": "(?<=^|\\s)((#(?!{)).*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "comment.line.number-sign.yaml"}, "2": map[string]interface{}{"name": "punctuation.definition.comment.yaml"}}}, "constants": map[string]interface{}{"match": "(?<=\\s)(true|false|null)(?=\\s*$)", "name": "constant.language.yaml"}, "scalar-content": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comment"}, map[string]interface{}{"match": "!(?=\\s)", "name": "punctuation.definition.tag.non-specific.yaml"}, map[string]interface{}{"include": "#constants"}, map[string]interface{}{"include": "#date"}, map[string]interface{}{"include": "#numeric"}, map[string]interface{}{"include": "#strings"}}}, "variables": map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.variable.yaml"}}, "match": "(&|\\*)\\w+$", "name": "variable.other.yaml"}, "date": map[string]interface{}{"match": "([0-9]{4}-[0-9]{2}-[0-9]{2})\\s*($|(?=#)(?!#{))", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "constant.other.date.yaml"}}}, "escaped_char": map[string]interface{}{"match": "\\\\.", "name": "constant.character.escape.yaml"}}, "scopeName": "source.yaml", "name": "YAML", "fileTypes": []interface{}{"clang-format", "eslintrc", "eyaml", "eyml", "yaml", "yaml.erb", "yml", "yml.erb", "sls", "stylelintrc", "sublime-syntax", "Boxfile"}}}
