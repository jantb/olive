package main

var syntaxes = []map[string]interface{}{map[string]interface{}{"comment": "Go language", "fileTypes": []interface{}{"go"}, "foldingStartMarker": "({|\\()\\s*$", "foldingStopMarker": "(}|\\))\\s*$", "patterns": []interface{}{map[string]interface{}{"include": "#comments"}, map[string]interface{}{"begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.go"}}, "name": "string.quoted.double.go", "patterns": []interface{}{map[string]interface{}{"include": "#string_escaped_char"}, map[string]interface{}{"include": "#string_placeholder"}}, "comment": "Interpreted string literals"}, map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.go"}}, "name": "string.quoted.raw.go", "patterns": []interface{}{map[string]interface{}{"include": "#string_placeholder"}}, "comment": "Raw string literals", "begin": "`", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}}, "end": "`"}, map[string]interface{}{"comment": "Syntax error receiving channels", "match": "<\\-([\\t ]+)chan\\b", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.receive-channel.go"}}}, map[string]interface{}{"comment": "Syntax error sending channels", "match": "\\bchan([\\t ]+)<-", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.send-channel.go"}}}, map[string]interface{}{"comment": "Syntax error using slices", "match": "\\[\\](\\s+)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.slice.go"}}}, map[string]interface{}{"comment": "Syntax error numeric literals", "match": "\\b0[0-7]*[89]\\d*\\b", "name": "invalid.illegal.numeric.go"}, map[string]interface{}{"comment": "Built-in functions", "match": "\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()", "name": "support.function.builtin.go"}, map[string]interface{}{"comment": "Function declarations", "match": "^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?([a-zA-Z_]\\w*)(?=\\())?", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.function.go"}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#brackets"}, map[string]interface{}{"include": "#operators"}}}, "3": map[string]interface{}{"name": "entity.name.function.go"}}}, map[string]interface{}{"comment": "Functions", "match": "(\\bfunc\\b)|([a-zA-Z_]\\w*)(?=\\()", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.function.go"}, "2": map[string]interface{}{"name": "support.function.go"}}}, map[string]interface{}{"comment": "Floating-point literals", "match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?", "name": "constant.numeric.floating-point.go"}, map[string]interface{}{"comment": "Integers", "match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b", "name": "constant.numeric.integer.go"}, map[string]interface{}{"name": "constant.language.go", "comment": "Language constants", "match": "\\b(true|false|nil|iota)\\b"}, map[string]interface{}{"comment": "Package declarations", "match": "(?<=package)\\s+([a-zA-Z_]\\w*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.package.go"}}}, map[string]interface{}{"captures": map[string]interface{}{"6": map[string]interface{}{"name": "punctuation.definition.string.end.go"}, "2": map[string]interface{}{"name": "entity.alias.import.go"}, "3": map[string]interface{}{"name": "string.quoted.double.go"}, "4": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}, "5": map[string]interface{}{"name": "entity.name.import.go"}}, "comment": "Single line import declarations", "match": "(?<=import)(\\s+((?!\\s+\")[^\\s]*)?\\s*)((\")([^\"]*)(\"))"}, map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "comment": "Multiline import declarations", "begin": "(?<=import)\\s+(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "patterns": []interface{}{map[string]interface{}{"match": "((?!\\s+\")[^\\s]*)?\\s+((\")([^\"]*)(\"))", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.alias.import.go"}, "2": map[string]interface{}{"name": "string.quoted.double.go"}, "3": map[string]interface{}{"name": "punctuation.definition.string.begin.go"}, "4": map[string]interface{}{"name": "entity.name.import.go"}, "5": map[string]interface{}{"name": "punctuation.definition.string.end.go"}}}, map[string]interface{}{"include": "#comments"}}, "end": "\\)"}, map[string]interface{}{"comment": "Type declarations", "match": "(?<=type)\\s+([a-zA-Z_]\\w*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.type.go"}}}, map[string]interface{}{"captures": map[string]interface{}{"0": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}}, "comment": "Shorthand variable declaration and assignments", "match": "[a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*(?=\\s*:=)"}, map[string]interface{}{"comment": "Assignments to existing variables", "match": "(?<!var )\\s*([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(?=\\s*=[^=])", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}}}, map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#variables"}}}}, "comment": "Single line variable declarations/assignments", "match": "(?<=var)\\s+(.*)$"}, map[string]interface{}{"begin": "(\\bvar\\b)\\s+(\\()", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "keyword.var.go"}, "2": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "end": "\\)", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.other.bracket.round.go"}}, "patterns": []interface{}{map[string]interface{}{"include": "#variables"}, map[string]interface{}{"include": "$self"}}, "comment": "Multiline variable declarations/assignments"}, map[string]interface{}{"comment": "Terminators", "match": ";", "name": "punctuation.terminator.go"}, map[string]interface{}{"include": "#brackets"}, map[string]interface{}{"include": "#delimiters"}, map[string]interface{}{"include": "#keywords"}, map[string]interface{}{"include": "#operators"}, map[string]interface{}{"include": "#runes"}, map[string]interface{}{"include": "#storage_types"}}, "repository": map[string]interface{}{"string_placeholder": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]", "name": "constant.other.placeholder.go"}}}, "variables": map[string]interface{}{"comment": "First add tests and make sure existing tests still pass when changing anything here!", "patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}, "match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)\\s*(=.*)"}, map[string]interface{}{"match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\*]?[a-zA-Z_]\\w*\\s*)(=.*)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.assignment.go"}, map[string]interface{}{"include": "#delimiters"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}, map[string]interface{}{"match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\[\\]\\*]{0,3}[a-zA-Z_]\\w*\\s*[^=].*)", "captures": map[string]interface{}{"1": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "[a-zA-Z_]\\w*", "name": "variable.other.declaration.go"}, map[string]interface{}{"include": "#delimiters"}}}, "2": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "$self"}}}}}}}, "storage_types": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\bbool\\b", "name": "storage.type.boolean.go"}, map[string]interface{}{"name": "storage.type.byte.go", "match": "\\bbyte\\b"}, map[string]interface{}{"match": "\\berror\\b", "name": "storage.type.error.go"}, map[string]interface{}{"match": "\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\b", "name": "storage.type.numeric.go"}, map[string]interface{}{"match": "\\brune\\b", "name": "storage.type.rune.go"}, map[string]interface{}{"match": "\\bstring\\b", "name": "storage.type.string.go"}, map[string]interface{}{"match": "\\buintptr\\b", "name": "storage.type.uintptr.go"}}}, "string_escaped_char": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})", "name": "constant.character.escape.go"}, map[string]interface{}{"match": "\\\\[^0-7xuUabfnrtv\\'\"]", "name": "invalid.illegal.unknown-escape.go"}}}, "brackets": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\{|\\}", "name": "punctuation.other.bracket.curly.go"}, map[string]interface{}{"match": "\\(|\\)", "name": "punctuation.other.bracket.round.go"}, map[string]interface{}{"match": "\\[|\\]", "name": "punctuation.other.bracket.square.go"}}}, "comments": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"begin": "/\\*", "end": "\\*/", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.go"}}, "name": "comment.block.go"}, map[string]interface{}{"begin": "//", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.go"}}, "end": "$", "name": "comment.line.double-slash.go"}}}, "delimiters": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": ",", "name": "punctuation.other.comma.go"}, map[string]interface{}{"match": "\\.(?!\\.\\.)", "name": "punctuation.other.period.go"}, map[string]interface{}{"match": ":(?!=)", "name": "punctuation.other.colon.go"}}}, "keywords": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"comment": "Flow control keywords", "match": "\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\b", "name": "keyword.control.go"}, map[string]interface{}{"match": "\\bchan\\b", "name": "keyword.channel.go"}, map[string]interface{}{"match": "\\bconst\\b", "name": "keyword.const.go"}, map[string]interface{}{"match": "\\bfunc\\b", "name": "keyword.function.go"}, map[string]interface{}{"match": "\\binterface\\b", "name": "keyword.interface.go"}, map[string]interface{}{"match": "\\bimport\\b", "name": "keyword.import.go"}, map[string]interface{}{"match": "\\bmap\\b", "name": "keyword.map.go"}, map[string]interface{}{"match": "\\bpackage\\b", "name": "keyword.package.go"}, map[string]interface{}{"match": "\\bstruct\\b", "name": "keyword.struct.go"}, map[string]interface{}{"name": "keyword.type.go", "match": "\\btype\\b"}, map[string]interface{}{"match": "\\bvar\\b", "name": "keyword.var.go"}}}, "operators": map[string]interface{}{"comment": "Note that the order here is very important!", "patterns": []interface{}{map[string]interface{}{"match": "(\\*|&)(?=\\w)", "name": "keyword.operator.address.go"}, map[string]interface{}{"match": "<\\-", "name": "keyword.operator.channel.go"}, map[string]interface{}{"match": "\\-\\-", "name": "keyword.operator.decrement.go"}, map[string]interface{}{"match": "\\+\\+", "name": "keyword.operator.increment.go"}, map[string]interface{}{"name": "keyword.operator.comparison.go", "match": "(==|!=|<=|>=|<[^<]|>[^>])"}, map[string]interface{}{"match": "(&&|\\|\\||!)", "name": "keyword.operator.logical.go"}, map[string]interface{}{"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)", "name": "keyword.operator.assignment.go"}, map[string]interface{}{"match": "(\\+|\\-|\\*|/|%)", "name": "keyword.operator.arithmetic.go"}, map[string]interface{}{"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)", "name": "keyword.operator.arithmetic.bitwise.go"}, map[string]interface{}{"match": "\\.\\.\\.", "name": "keyword.operator.ellipsis.go"}}}, "runes": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "\\'(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}))\\'", "name": "constant.other.rune.go"}, map[string]interface{}{"match": "\\'.*\\'", "name": "invalid.illegal.unknown-rune.go"}}}}, "scopeName": "source.go", "name": "Go"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#value"}}, "repository": map[string]interface{}{"value": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#constant"}, map[string]interface{}{"include": "#number"}, map[string]interface{}{"include": "#string"}, map[string]interface{}{"include": "#array"}, map[string]interface{}{"include": "#object"}}}, "array": map[string]interface{}{"name": "meta.structure.array.json", "patterns": []interface{}{map[string]interface{}{"include": "#value"}, map[string]interface{}{"name": "punctuation.separator.array.json", "match": ","}, map[string]interface{}{"match": "[^\\s\\]]", "name": "invalid.illegal.expected-array-separator.json"}}, "begin": "\\[", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.array.begin.json"}}, "end": "(,)?[\\s\\n]*(\\])", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.trailing-array-separator.json"}, "2": map[string]interface{}{"name": "punctuation.definition.array.end.json"}}}, "constant": map[string]interface{}{"name": "constant.language.json", "match": "\\b(true|false|null)\\b"}, "number": map[string]interface{}{"match": "-?(?=[1-9]|0(?!\\d))\\d+(\\.\\d+)?([eE][+-]?\\d+)?", "name": "constant.numeric.json"}, "object": map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.dictionary.end.json"}}, "name": "meta.structure.dictionary.json", "patterns": []interface{}{map[string]interface{}{"begin": "(?=\")", "end": "(?<=\")", "name": "meta.structure.dictionary.key.json", "patterns": []interface{}{map[string]interface{}{"include": "#string"}}}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.separator.dictionary.key-value.json"}}, "end": "(,)(?=[\\s\\n]*})|(,)|(?=})", "endCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "invalid.illegal.trailing-dictionary-separator.json"}, "2": map[string]interface{}{"name": "punctuation.separator.dictionary.pair.json"}}, "name": "meta.structure.dictionary.value.json", "patterns": []interface{}{map[string]interface{}{"include": "#value"}, map[string]interface{}{"match": "[^\\s,]", "name": "invalid.illegal.expected-dictionary-separator.json"}}, "begin": ":"}, map[string]interface{}{"match": "[^\\s}]", "name": "invalid.illegal.expected-dictionary-separator.json"}}, "begin": "{", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.dictionary.begin.json"}}, "end": "}"}, "string": map[string]interface{}{"begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.json"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.json"}}, "name": "string.quoted.double.json", "patterns": []interface{}{map[string]interface{}{"match": "(?x)\n\\\\                # a literal backslash\n(                   # followed by\n  [\"\\\\/bfnrt]     # one of these characters\n  |                 # or\n  u[0-9a-fA-F]{4}   # a u and four hex digits\n)", "name": "constant.character.escape.json"}, map[string]interface{}{"match": "\\\\.", "name": "invalid.illegal.unrecognized-string-escape.json"}}}}, "scopeName": "source.json", "name": "JSON", "fileTypes": []interface{}{"avsc", "babelrc", "bowerrc", "composer.lock", "geojson", "gltf", "ipynb", "jscsrc", "jshintrc", "jslintrc", "json", "jsonl", "jsonld", "languagebabel", "ldj", "ldjson", "schema", "stylintrc", "template", "tern-config", "tern-project", "tfstate", "tfstate.backup", "topojson", "webapp", "webmanifest"}}, map[string]interface{}{"scopeName": "text.xml", "name": "XML", "fileTypes": []interface{}{"atom", "axml", "bpmn", "config", "cpt", "csl", "csproj", "csproj.user", "dae", "dia", "dita", "ditamap", "dtml", "fodg", "fodp", "fods", "fodt", "fsproj", "fxml", "gir", "glade", "gpx", "graphml", "icls", "iml", "isml", "jmx", "jsp", "launch", "menu", "mxml", "nuspec", "opml", "owl", "pom", "ppj", "proj", "pt", "pubxml", "pubxml.user", "rdf", "rng", "rss", "sdf", "shproj", "sld", "storyboard", "svg", "targets", "tld", "vbox", "vbox-prev", "vbproj", "vbproj.user", "vcproj", "vcproj.filters", "vcxproj", "vcxproj.filters", "wixmsp", "wixmst", "wixobj", "wixout", "wsdl", "wxs", "xaml", "xbl", "xib", "xlf", "xliff", "xml", "xpdl", "xsd", "xul", "ui"}, "firstLineMatch": "(?x)\n# XML declaration\n(?:\n  ^ <\\? xml\n\n  # VersionInfo\n  \\s+ version\n  \\s* = \\s*\n  (['\"])\n    1 \\. [0-9]+\n  \\1\n\n  # EncodingDecl\n  (?:\n    \\s+ encoding\n    \\s* = \\s*\n\n    # EncName\n    (['\"])\n      [A-Za-z]\n      [-A-Za-z0-9._]*\n    \\2\n  )?\n\n  # SDDecl\n  (?:\n    \\s+ standalone\n    \\s* = \\s*\n    (['\"])\n      (?:yes|no)\n    \\3\n  )?\n\n  \\s* \\?>\n)\n|\n# Modeline\n(?i:\n  # Emacs\n  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)\n    xml\n  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-\n  |\n  # Vim\n  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=\n    xml\n  (?=\\s|:|$)\n)", "patterns": []interface{}{map[string]interface{}{"begin": "(<\\?)\\s*([-_a-zA-Z0-9]+)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "entity.name.tag.xml"}}, "end": "(\\?>)", "name": "meta.tag.preprocessor.xml", "patterns": []interface{}{map[string]interface{}{"match": " ([a-zA-Z-]+)", "name": "entity.other.attribute-name.xml"}, map[string]interface{}{"include": "#doublequotedString"}, map[string]interface{}{"include": "#singlequotedString"}}}, map[string]interface{}{"end": "\\s*(>)", "name": "meta.tag.sgml.doctype.xml", "patterns": []interface{}{map[string]interface{}{"include": "#internalSubset"}}, "begin": "(<!)(DOCTYPE)\\s+([:a-zA-Z_][:a-zA-Z0-9_.-]*)", "captures": map[string]interface{}{"2": map[string]interface{}{"name": "keyword.other.doctype.xml"}, "3": map[string]interface{}{"name": "variable.language.documentroot.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}}}, map[string]interface{}{"include": "#comments"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#tagStuff"}}, "begin": "(<)((?:([-_a-zA-Z0-9]+)(:))?([-_a-zA-Z0-9:]+))(?=(\\s[^>]*)?></\\2>)", "beginCaptures": map[string]interface{}{"4": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "5": map[string]interface{}{"name": "entity.name.tag.localname.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "entity.name.tag.xml"}, "3": map[string]interface{}{"name": "entity.name.tag.namespace.xml"}}, "end": "(>)(</)((?:([-_a-zA-Z0-9]+)(:))?([-_a-zA-Z0-9:]+))(>)", "endCaptures": map[string]interface{}{"4": map[string]interface{}{"name": "entity.name.tag.namespace.xml"}, "5": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "6": map[string]interface{}{"name": "entity.name.tag.localname.xml"}, "7": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "3": map[string]interface{}{"name": "entity.name.tag.xml"}}, "name": "meta.tag.no-content.xml"}, map[string]interface{}{"begin": "(</?)(?:([-\\w\\.]+)((:)))?([-\\w\\.:]+)", "captures": map[string]interface{}{"4": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "5": map[string]interface{}{"name": "entity.name.tag.localname.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "entity.name.tag.namespace.xml"}, "3": map[string]interface{}{"name": "entity.name.tag.xml"}}, "end": "(/?>)", "name": "meta.tag.xml", "patterns": []interface{}{map[string]interface{}{"include": "#tagStuff"}}}, map[string]interface{}{"include": "#entity"}, map[string]interface{}{"include": "#bare-ampersand"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.begin.xml"}}, "end": "%>", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.end.xml"}}, "name": "source.java-props.embedded.xml", "patterns": []interface{}{map[string]interface{}{"match": "page|include|taglib", "name": "keyword.other.page-props.xml"}}, "begin": "<%@"}, map[string]interface{}{"beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.begin.xml"}}, "end": "(?!--)%>", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.section.embedded.end.xml"}}, "name": "source.java.embedded.xml", "patterns": []interface{}{map[string]interface{}{"include": "source.java"}}, "begin": "<%[!=]?(?!--)"}, map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.xml"}}, "name": "string.unquoted.cdata.xml", "begin": "<!\\[CDATA\\[", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.xml"}}, "end": "]]>"}}, "repository": map[string]interface{}{"EntityDecl": map[string]interface{}{"begin": "(<!)(ENTITY)\\s+(%\\s+)?([:a-zA-Z_][:a-zA-Z0-9_.-]*)(\\s+(?:SYSTEM|PUBLIC)\\s+)?", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.tag.xml"}, "2": map[string]interface{}{"name": "keyword.other.entity.xml"}, "3": map[string]interface{}{"name": "punctuation.definition.entity.xml"}, "4": map[string]interface{}{"name": "variable.language.entity.xml"}, "5": map[string]interface{}{"name": "keyword.other.entitytype.xml"}}, "end": "(>)", "patterns": []interface{}{map[string]interface{}{"include": "#doublequotedString"}, map[string]interface{}{"include": "#singlequotedString"}}}, "doublequotedString": map[string]interface{}{"begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.xml"}}, "end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.xml"}}, "name": "string.quoted.double.xml", "patterns": []interface{}{map[string]interface{}{"include": "#entity"}, map[string]interface{}{"include": "#bare-ampersand"}}}, "parameterEntity": map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.constant.xml"}, "3": map[string]interface{}{"name": "punctuation.definition.constant.xml"}}, "match": "(%)([:a-zA-Z_][:a-zA-Z0-9_.-]*)(;)", "name": "constant.character.parameter-entity.xml"}, "singlequotedString": map[string]interface{}{"endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.xml"}}, "name": "string.quoted.single.xml", "patterns": []interface{}{map[string]interface{}{"include": "#entity"}, map[string]interface{}{"include": "#bare-ampersand"}}, "begin": "'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.xml"}}, "end": "'"}, "bare-ampersand": map[string]interface{}{"match": "&", "name": "invalid.illegal.bad-ampersand.xml"}, "entity": map[string]interface{}{"captures": map[string]interface{}{"3": map[string]interface{}{"name": "punctuation.definition.constant.xml"}, "1": map[string]interface{}{"name": "punctuation.definition.constant.xml"}}, "match": "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)", "name": "constant.character.entity.xml"}, "internalSubset": map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.constant.xml"}}, "end": "(\\])", "name": "meta.internalsubset.xml", "patterns": []interface{}{map[string]interface{}{"include": "#EntityDecl"}, map[string]interface{}{"include": "#parameterEntity"}, map[string]interface{}{"include": "#comments"}}, "begin": "(\\[)"}, "tagStuff": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"match": "(?:^|\\s+)(?:([-\\w.]+)((:)))?([-\\w.:]+)=", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.other.attribute-name.namespace.xml"}, "2": map[string]interface{}{"name": "entity.other.attribute-name.xml"}, "3": map[string]interface{}{"name": "punctuation.separator.namespace.xml"}, "4": map[string]interface{}{"name": "entity.other.attribute-name.localname.xml"}}}, map[string]interface{}{"include": "#doublequotedString"}, map[string]interface{}{"include": "#singlequotedString"}}}, "comments": map[string]interface{}{"begin": "<[!%]--", "captures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.comment.xml"}}, "end": "--%?>", "name": "comment.block.xml"}}}, map[string]interface{}{"scopeName": "source.yaml", "name": "YAML", "fileTypes": []interface{}{"clang-format", "eslintrc", "eyaml", "eyml", "yaml", "yaml.erb", "yml", "yml.erb", "sls", "stylelintrc", "sublime-syntax", "Boxfile"}, "firstLineMatch": "^(#cloud-config|---)", "patterns": []interface{}{map[string]interface{}{"include": "#erb"}, map[string]interface{}{"include": "#comment"}, map[string]interface{}{"match": "\\t+", "name": "invalid.illegal.whitespace.yaml"}, map[string]interface{}{"match": "^---", "name": "punctuation.definition.directives.end.yaml"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#constants"}, map[string]interface{}{"include": "#erb"}}, "begin": "^(\\s*)(?!-\\s*)(\\S+)\\s*(:)(?:\\s+((!)[^!\\s]+))?\\s+(?=\\||>)", "beginCaptures": map[string]interface{}{"2": map[string]interface{}{"name": "entity.name.tag.yaml"}, "3": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "4": map[string]interface{}{"name": "keyword.other.tag.local.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.tag.local.yaml"}}, "end": "^(?!\\1\\s+)(?=\\s*(-|[^!@#%&*>,].*:|#))", "contentName": "string.unquoted.block.yaml"}, map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#constants"}, map[string]interface{}{"include": "#erb"}}, "begin": "^(\\s*)(?:(-)|(?:(?:(-)\\s*)?(\\S+)\\s*(:)))(?:\\s+((!)[^!\\s]+))?\\s+(?=\\||>)", "beginCaptures": map[string]interface{}{"7": map[string]interface{}{"name": "punctuation.definition.tag.local.yaml"}, "2": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "3": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "4": map[string]interface{}{"name": "entity.name.tag.yaml"}, "5": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "6": map[string]interface{}{"name": "keyword.other.tag.local.yaml"}}, "end": "^(?!\\1 \\4\\s+)(?=\\s*(-|[^!@#%&*>,].*:|#))", "contentName": "string.unquoted.block.yaml"}, map[string]interface{}{"match": "(<<)\\s*(:)\\s+(.+)$", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "entity.name.tag.merge.yaml"}, "2": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "3": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#variables"}}}}}, map[string]interface{}{"end": "(?=^\\s*(-|[^!{@#%&*>,].*:\\s+))", "patterns": []interface{}{map[string]interface{}{"include": "#scalar-content"}}, "begin": "(?>^\\s*(-)?\\s*)([^!{@#%&*>,'\"][^#'\"]*?)(:)\\s+((!!)omap)?", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "2": map[string]interface{}{"name": "entity.name.tag.yaml"}, "3": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "4": map[string]interface{}{"name": "keyword.other.omap.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.tag.omap.yaml"}}}, map[string]interface{}{"begin": "(-)?\\s*(?:((')([^']*?)('))|((\")([^\"]*?)(\")))(:)\\s+((!!)omap)?", "beginCaptures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "2": map[string]interface{}{"name": "string.quoted.single.yaml"}, "3": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}, "9": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}, "4": map[string]interface{}{"name": "entity.name.tag.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}, "6": map[string]interface{}{"name": "string.quoted.double.yaml"}, "7": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}, "8": map[string]interface{}{"name": "entity.name.tag.yaml"}, "10": map[string]interface{}{"name": "punctuation.separator.key-value.yaml"}, "11": map[string]interface{}{"name": "keyword.other.omap.yaml"}, "12": map[string]interface{}{"name": "punctuation.definition.tag.omap.yaml"}}, "end": "(?=^\\s*(-|[^!{@#%&*>,].*:\\s+))", "patterns": []interface{}{map[string]interface{}{"include": "#scalar-content"}}}, map[string]interface{}{"begin": "(-)\\s+(?:((!!)omap)|((!)[^!\\s]+)|(?![!@#%&*>,]))", "beginCaptures": map[string]interface{}{"4": map[string]interface{}{"name": "keyword.other.tag.local.yaml"}, "5": map[string]interface{}{"name": "punctuation.definition.tag.local.yaml"}, "1": map[string]interface{}{"name": "punctuation.definition.entry.yaml"}, "2": map[string]interface{}{"name": "keyword.other.omap.yaml"}, "3": map[string]interface{}{"name": "punctuation.definition.tag.omap.yaml"}}, "end": "(?=^\\s*(-|[^!{@#%&*>,].*:))", "patterns": []interface{}{map[string]interface{}{"include": "#scalar-content"}}}, map[string]interface{}{"include": "#variables"}, map[string]interface{}{"include": "#strings"}}, "repository": map[string]interface{}{"scalar-content": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"include": "#comment"}, map[string]interface{}{"name": "punctuation.definition.tag.non-specific.yaml", "match": "!(?=\\s)"}, map[string]interface{}{"include": "#constants"}, map[string]interface{}{"include": "#date"}, map[string]interface{}{"include": "#numeric"}, map[string]interface{}{"include": "#strings"}}}, "variables": map[string]interface{}{"match": "(&|\\*)\\w+$", "name": "variable.other.yaml", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.variable.yaml"}}}, "date": map[string]interface{}{"match": "([0-9]{4}-[0-9]{2}-[0-9]{2})\\s*($|(?=#)(?!#{))", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "constant.other.date.yaml"}}}, "escaped_char": map[string]interface{}{"match": "\\\\.", "name": "constant.character.escape.yaml"}, "strings": map[string]interface{}{"patterns": []interface{}{map[string]interface{}{"end": "\"", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}}, "name": "string.quoted.double.yaml", "patterns": []interface{}{map[string]interface{}{"include": "#escaped_char"}, map[string]interface{}{"include": "#erb"}}, "begin": "\"", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}}}, map[string]interface{}{"name": "string.quoted.single.yaml", "applyEndPatternLast": true, "patterns": []interface{}{map[string]interface{}{"match": "''", "name": "constant.character.escape.yaml"}, map[string]interface{}{"include": "#erb"}}, "begin": "'", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}}, "end": "'", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}}}, map[string]interface{}{"begin": "`", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.begin.yaml"}}, "end": "`", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.string.end.yaml"}}, "name": "string.interpolated.yaml", "patterns": []interface{}{map[string]interface{}{"include": "#escaped_char"}, map[string]interface{}{"include": "#erb"}}}, map[string]interface{}{"match": "[^\\s\"'\\n](?!\\s*#(?!{))([^#\\n]|((?<!\\s)#))*", "name": "string.unquoted.yaml"}}}, "numeric": map[string]interface{}{"match": "(((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?)\\s*($|(?=#)(?!#{))", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "constant.numeric.yaml"}}}, "comment": map[string]interface{}{"match": "(?<=^|\\s)((#(?!{)).*)", "captures": map[string]interface{}{"1": map[string]interface{}{"name": "comment.line.number-sign.yaml"}, "2": map[string]interface{}{"name": "punctuation.definition.comment.yaml"}}}, "constants": map[string]interface{}{"match": "(?<=\\s)(true|false|null)(?=\\s*$)", "name": "constant.language.yaml"}, "erb": map[string]interface{}{"begin": "<%+(?!>)=?", "beginCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.embedded.begin.ruby"}}, "contentName": "source.ruby.rails", "end": "(%)>", "endCaptures": map[string]interface{}{"0": map[string]interface{}{"name": "punctuation.definition.embedded.end.ruby"}, "1": map[string]interface{}{"name": "source.ruby.rails"}}, "name": "meta.embedded.line.ruby", "patterns": []interface{}{map[string]interface{}{"captures": map[string]interface{}{"1": map[string]interface{}{"name": "punctuation.definition.comment.ruby"}}, "match": "(#).*?(?=%>)", "name": "comment.line.number-sign.ruby"}, map[string]interface{}{"include": "source.ruby.rails"}}}}}}
