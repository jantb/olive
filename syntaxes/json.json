{
  "fileTypes": [
    "json",
    "sublime-settings",
    "sublime-menu",
    "sublime-keymap",
    "sublime-mousemap",
    "sublime-theme",
    "sublime-build",
    "sublime-project",
    "sublime-completions"
  ],
  "foldingStartMarker": "(?x)       # turn on extended mode\n^        # a line beginning with\n\\s*      # some optional space\n[{\\[]    # the start of an object or array\n(?!      # but not followed by\n.*     # whatever\n[}\\]]  # and the close of an object or array\n,?     # an optional comma\n\\s*    # some optional space\n$      # at the end of the line\n)\n|        # ...or...\n[{\\[]    # the start of an object or array\n\\s*      # some optional space\n$        # at the end of the line",
  "foldingStopMarker": "(?x)     # turn on extended mode\n^      # a line beginning with\n\\s*    # some optional space\n[}\\]]  # and the close of an object or array",
  "keyEquivalent": "^~J",
  "repository": {
    "comments": {
      "patterns": [
        {
          "end": "\\*\/",
          "begin": "\/\\*\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "name": "comment.block.documentation.json"
        },
        {
          "end": "\\*\/",
          "begin": "\/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "name": "comment.block.json"
        },
        {
          "match": "(\/\/).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "name": "comment.line.double-slash.js"
        }
      ]
    },
    "number": {
      "match": "(?x)        # turn on extended mode\n-?        # an optional minus\n(?:\n0       # a zero\n|       # ...or...\n[1-9]   # a 1-9 character\n\\d*     # followed by zero or more digits\n)\n(?:\n(?:\n\\.    # a period\n\\d+   # followed by one or more digits\n)?\n(?:\n[eE]  # an e character\n[+-]? # followed by an option +\/-\n\\d+   # followed by one or more digits\n)?      # make exponent optional\n)?        # make decimal portion optional",
      "name": "constant.numeric.json"
    },
    "object": {
      "end": "\\}",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.json"
        }
      },
      "patterns": [
        {
          "include": "#objectkey",
          "comment": "the JSON object key"
        },
        {
          "include": "#comments"
        },
        {
          "end": "(,)|(?=\\})",
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.dictionary.key-value.json"
            }
          },
          "patterns": [
            {
              "include": "#value",
              "comment": "the JSON object value"
            },
            {
              "match": "[^\\s,]",
              "name": "invalid.illegal.expected-dictionary-separator.json"
            }
          ],
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.pair.json"
            }
          },
          "name": "meta.structure.dictionary.value.json"
        },
        {
          "match": "[^\\s\\}]",
          "name": "invalid.illegal.expected-dictionary-separator.json"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.json"
        }
      },
      "name": "meta.structure.dictionary.json"
    },
    "constant": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "constant.language.json"
    },
    "string": {
      "end": "\"",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.json"
        }
      },
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.json"
        }
      },
      "name": "string.quoted.double.json"
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\n\\\\                # a literal backslash\n(?:               # ...followed by...\n[\"\\\\\/bfnrt]     # one of these characters\n|               # ...or...\nu               # a u\n[0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.json"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.json"
        }
      ]
    },
    "value": {
      "patterns": [
        {
          "include": "#constant"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#array"
        },
        {
          "include": "#object"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "array": {
      "end": "\\]",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.json"
        }
      },
      "patterns": [
        {
          "include": "#value"
        },
        {
          "match": ",",
          "name": "punctuation.separator.array.json"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-array-separator.json"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.json"
        }
      },
      "name": "meta.structure.array.json"
    },
    "objectkey": {
      "end": "\"",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.begin.json"
        }
      },
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ],
      "endCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.end.json"
        }
      },
      "name": "support.type.property-name.json"
    }
  },
  "uuid": "8f97457b-516e-48ce-83c7-08ae12fb327a",
  "patterns": [
    {
      "include": "#value"
    }
  ],
  "name": "JSON (Javascript Next)",
  "scopeName": "source.json"
}